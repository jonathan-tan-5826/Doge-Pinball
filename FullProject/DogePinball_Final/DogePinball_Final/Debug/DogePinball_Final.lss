
DogePinball_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000594  00800100  00000ed0  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000075  00800694  00800694  000014f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000232c  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e18  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012fc  00000000  00000000  000048dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00005bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccf  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001295  00000000  00000000  00006cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f8 c0       	rjmp	.+496    	; 0x226 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	16 e0       	ldi	r17, 0x06	; 6
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 39       	cpi	r26, 0x94	; 148
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a4 e9       	ldi	r26, 0x94	; 148
  b6:	b6 e0       	ldi	r27, 0x06	; 6
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	22 d5       	rcall	.+2628   	; 0xb08 <main>
  c4:	03 c7       	rjmp	.+3590   	; 0xecc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <A2D_init>:
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <Set_A2D_Pin>:
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	60 f0       	brcs	.+24     	; 0xf0 <Set_A2D_Pin+0x1c>
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 83       	st	Z, r24
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	00 00       	nop
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	e9 f7       	brne	.-6      	; 0xe2 <Set_A2D_Pin+0xe>
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <__data_end>
  ee:	08 95       	ret
  f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  f4:	f5 cf       	rjmp	.-22     	; 0xe0 <Set_A2D_Pin+0xc>

000000f6 <delay_ms>:
  f6:	18 16       	cp	r1, r24
  f8:	19 06       	cpc	r1, r25
  fa:	5c f0       	brlt	.+22     	; 0x112 <delay_ms+0x1c>
  fc:	08 95       	ret
  fe:	00 00       	nop
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	e1 f7       	brne	.-8      	; 0xfe <delay_ms+0x8>
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	48 17       	cp	r20, r24
 10c:	59 07       	cpc	r21, r25
 10e:	29 f4       	brne	.+10     	; 0x11a <delay_ms+0x24>
 110:	08 95       	ret
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	77 e0       	ldi	r23, 0x07	; 7
 118:	63 e0       	ldi	r22, 0x03	; 3
 11a:	27 2f       	mov	r18, r23
 11c:	36 2f       	mov	r19, r22
 11e:	ef cf       	rjmp	.-34     	; 0xfe <delay_ms+0x8>

00000120 <LCD_WriteCommand>:
 120:	5e 98       	cbi	0x0b, 6	; 11
 122:	88 b9       	out	0x08, r24	; 8
 124:	5f 9a       	sbi	0x0b, 7	; 11
 126:	00 00       	nop
 128:	5f 98       	cbi	0x0b, 7	; 11
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	e3 cf       	rjmp	.-58     	; 0xf6 <delay_ms>
 130:	08 95       	ret

00000132 <LCD_ClearScreen>:
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	f5 cf       	rjmp	.-22     	; 0x120 <LCD_WriteCommand>
 136:	08 95       	ret

00000138 <LCD_Cursor>:
 138:	81 31       	cpi	r24, 0x11	; 17
 13a:	18 f4       	brcc	.+6      	; 0x142 <LCD_Cursor+0xa>
 13c:	81 58       	subi	r24, 0x81	; 129
 13e:	f0 cf       	rjmp	.-32     	; 0x120 <LCD_WriteCommand>
 140:	08 95       	ret
 142:	81 55       	subi	r24, 0x51	; 81
 144:	ed cf       	rjmp	.-38     	; 0x120 <LCD_WriteCommand>
 146:	08 95       	ret

00000148 <LCD_init>:
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	d4 df       	rcall	.-88     	; 0xf6 <delay_ms>
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	e7 df       	rcall	.-50     	; 0x120 <LCD_WriteCommand>
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	e5 df       	rcall	.-54     	; 0x120 <LCD_WriteCommand>
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	e3 df       	rcall	.-58     	; 0x120 <LCD_WriteCommand>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	e1 df       	rcall	.-62     	; 0x120 <LCD_WriteCommand>
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	c9 cf       	rjmp	.-110    	; 0xf6 <delay_ms>
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	88 b9       	out	0x08, r24	; 8
 16a:	5f 9a       	sbi	0x0b, 7	; 11
 16c:	00 00       	nop
 16e:	5f 98       	cbi	0x0b, 7	; 11
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	c0 cf       	rjmp	.-128    	; 0xf6 <delay_ms>
 176:	08 95       	ret

00000178 <LCD_DisplayString>:
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	18 2f       	mov	r17, r24
 182:	eb 01       	movw	r28, r22
 184:	d6 df       	rcall	.-84     	; 0x132 <LCD_ClearScreen>
 186:	88 81       	ld	r24, Y
 188:	88 23       	and	r24, r24
 18a:	51 f0       	breq	.+20     	; 0x1a0 <LCD_DisplayString+0x28>
 18c:	01 e0       	ldi	r16, 0x01	; 1
 18e:	01 0f       	add	r16, r17
 190:	81 2f       	mov	r24, r17
 192:	d2 df       	rcall	.-92     	; 0x138 <LCD_Cursor>
 194:	89 91       	ld	r24, Y+
 196:	e7 df       	rcall	.-50     	; 0x166 <LCD_WriteData>
 198:	10 2f       	mov	r17, r16
 19a:	88 81       	ld	r24, Y
 19c:	81 11       	cpse	r24, r1
 19e:	f6 cf       	rjmp	.-20     	; 0x18c <LCD_DisplayString+0x14>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <GetJoystick_X>:
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	93 df       	rcall	.-218    	; 0xd4 <Set_A2D_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <GetJoystick_X+0x8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <GetJoystick_X+0xe>
 1b8:	00 00       	nop
 1ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c2:	08 95       	ret

000001c4 <GetJoystick_Y>:
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	86 df       	rcall	.-244    	; 0xd4 <Set_A2D_Pin>
 1c8:	89 ef       	ldi	r24, 0xF9	; 249
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <GetJoystick_Y+0x8>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <GetJoystick_Y+0xe>
 1d2:	00 00       	nop
 1d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1dc:	08 95       	ret

000001de <TimerOn>:
};

unsigned char GetGameTimerInSeconds()
{
	return gameTimer / NUMBER_TICKS_PER_SECOND;
}
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e4:	8d e7       	ldi	r24, 0x7D	; 125
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 202:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 206:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 20a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 20e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <_avr_timer_cntcurr>
 212:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <_avr_timer_cntcurr+0x1>
 216:	a0 93 e6 06 	sts	0x06E6, r26	; 0x8006e6 <_avr_timer_cntcurr+0x2>
 21a:	b0 93 e7 06 	sts	0x06E7, r27	; 0x8006e7 <_avr_timer_cntcurr+0x3>
 21e:	8f b7       	in	r24, 0x3f	; 63
 220:	80 68       	ori	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
 224:	08 95       	ret

00000226 <__vector_13>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <_avr_timer_cntcurr>
 23c:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <_avr_timer_cntcurr+0x1>
 240:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <_avr_timer_cntcurr+0x2>
 244:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <_avr_timer_cntcurr+0x3>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	a1 09       	sbc	r26, r1
 24c:	b1 09       	sbc	r27, r1
 24e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <_avr_timer_cntcurr>
 252:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <_avr_timer_cntcurr+0x1>
 256:	a0 93 e6 06 	sts	0x06E6, r26	; 0x8006e6 <_avr_timer_cntcurr+0x2>
 25a:	b0 93 e7 06 	sts	0x06E7, r27	; 0x8006e7 <_avr_timer_cntcurr+0x3>
 25e:	89 2b       	or	r24, r25
 260:	8a 2b       	or	r24, r26
 262:	8b 2b       	or	r24, r27
 264:	99 f4       	brne	.+38     	; 0x28c <__vector_13+0x66>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <TimerFlag>
 26c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 270:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 274:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 278:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 27c:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <_avr_timer_cntcurr>
 280:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <_avr_timer_cntcurr+0x1>
 284:	a0 93 e6 06 	sts	0x06E6, r26	; 0x8006e6 <_avr_timer_cntcurr+0x2>
 288:	b0 93 e7 06 	sts	0x06E7, r27	; 0x8006e7 <_avr_timer_cntcurr+0x3>
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <SetGameMode>:
 29e:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <isGameMode>
 2a2:	98 13       	cpse	r25, r24
 2a4:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <isGameMode>
 2a8:	08 95       	ret

000002aa <SetPlaying>:
 2aa:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <isPlaying>
 2ae:	98 13       	cpse	r25, r24
 2b0:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <isPlaying>
 2b4:	08 95       	ret

000002b6 <SetBallIn>:
 2b6:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <isBallIn>
 2ba:	98 13       	cpse	r25, r24
 2bc:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <isBallIn>
 2c0:	08 95       	ret

000002c2 <TickFunction_IRSensor_BallIn>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	ec 01       	movw	r28, r24
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	04 df       	rcall	.-504    	; 0xd4 <Set_A2D_Pin>
 2cc:	89 ef       	ldi	r24, 0xF9	; 249
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <TickFunction_IRSensor_BallIn+0xe>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <TickFunction_IRSensor_BallIn+0x14>
 2d6:	00 00       	nop
 2d8:	20 97       	sbiw	r28, 0x00	; 0
 2da:	19 f0       	breq	.+6      	; 0x2e2 <TickFunction_IRSensor_BallIn+0x20>
 2dc:	21 97       	sbiw	r28, 0x01	; 1
 2de:	29 f0       	breq	.+10     	; 0x2ea <TickFunction_IRSensor_BallIn+0x28>
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <TickFunction_IRSensor_BallIn+0x30>
 2e2:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <TickFunction_IRSensor_BallIn+0x34>
 2ea:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <TickFunction_IRSensor_BallIn+0x34>
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	c1 30       	cpi	r28, 0x01	; 1
 2f8:	d1 05       	cpc	r29, r1
 2fa:	61 f4       	brne	.+24     	; 0x314 <TickFunction_IRSensor_BallIn+0x52>
 2fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 300:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 304:	8e 3d       	cpi	r24, 0xDE	; 222
 306:	93 40       	sbci	r25, 0x03	; 3
 308:	18 f4       	brcc	.+6      	; 0x310 <TickFunction_IRSensor_BallIn+0x4e>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	d4 df       	rcall	.-88     	; 0x2b6 <SetBallIn>
 30e:	02 c0       	rjmp	.+4      	; 0x314 <TickFunction_IRSensor_BallIn+0x52>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	d1 df       	rcall	.-94     	; 0x2b6 <SetBallIn>
 314:	ce 01       	movw	r24, r28
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <SetGoal>:
 31c:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <isGoal>
 320:	98 13       	cpse	r25, r24
 322:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <isGoal>
 326:	08 95       	ret

00000328 <TickFunction_IRSensor_Goal>:
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	d1 de       	rcall	.-606    	; 0xd4 <Set_A2D_Pin>
 332:	89 ef       	ldi	r24, 0xF9	; 249
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <TickFunction_IRSensor_Goal+0xe>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <TickFunction_IRSensor_Goal+0x14>
 33c:	00 00       	nop
 33e:	20 97       	sbiw	r28, 0x00	; 0
 340:	19 f0       	breq	.+6      	; 0x348 <TickFunction_IRSensor_Goal+0x20>
 342:	21 97       	sbiw	r28, 0x01	; 1
 344:	29 f0       	breq	.+10     	; 0x350 <TickFunction_IRSensor_Goal+0x28>
 346:	08 c0       	rjmp	.+16     	; 0x358 <TickFunction_IRSensor_Goal+0x30>
 348:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 34c:	d0 e0       	ldi	r29, 0x00	; 0
 34e:	06 c0       	rjmp	.+12     	; 0x35c <TickFunction_IRSensor_Goal+0x34>
 350:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 354:	d0 e0       	ldi	r29, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <TickFunction_IRSensor_Goal+0x34>
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	c1 30       	cpi	r28, 0x01	; 1
 35e:	d1 05       	cpc	r29, r1
 360:	61 f4       	brne	.+24     	; 0x37a <TickFunction_IRSensor_Goal+0x52>
 362:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 366:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 36a:	8a 3c       	cpi	r24, 0xCA	; 202
 36c:	93 40       	sbci	r25, 0x03	; 3
 36e:	18 f4       	brcc	.+6      	; 0x376 <TickFunction_IRSensor_Goal+0x4e>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	d4 df       	rcall	.-88     	; 0x31c <SetGoal>
 374:	02 c0       	rjmp	.+4      	; 0x37a <TickFunction_IRSensor_Goal+0x52>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	d1 df       	rcall	.-94     	; 0x31c <SetGoal>
 37a:	ce 01       	movw	r24, r28
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <SetGutter>:
 382:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <isGutter>
 386:	98 13       	cpse	r25, r24
 388:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <isGutter>
 38c:	08 95       	ret

0000038e <TickFunction_IRSensor_Gutter>:
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
 394:	87 e0       	ldi	r24, 0x07	; 7
 396:	9e de       	rcall	.-708    	; 0xd4 <Set_A2D_Pin>
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <TickFunction_IRSensor_Gutter+0xe>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <TickFunction_IRSensor_Gutter+0x14>
 3a2:	00 00       	nop
 3a4:	20 97       	sbiw	r28, 0x00	; 0
 3a6:	19 f0       	breq	.+6      	; 0x3ae <TickFunction_IRSensor_Gutter+0x20>
 3a8:	21 97       	sbiw	r28, 0x01	; 1
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <TickFunction_IRSensor_Gutter+0x28>
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <TickFunction_IRSensor_Gutter+0x30>
 3ae:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <TickFunction_IRSensor_Gutter+0x34>
 3b6:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <isGameMode>
 3ba:	d0 e0       	ldi	r29, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <TickFunction_IRSensor_Gutter+0x34>
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	c1 30       	cpi	r28, 0x01	; 1
 3c4:	d1 05       	cpc	r29, r1
 3c6:	61 f4       	brne	.+24     	; 0x3e0 <TickFunction_IRSensor_Gutter+0x52>
 3c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3d0:	8a 3c       	cpi	r24, 0xCA	; 202
 3d2:	93 40       	sbci	r25, 0x03	; 3
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <TickFunction_IRSensor_Gutter+0x4e>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	d4 df       	rcall	.-88     	; 0x382 <SetGutter>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <TickFunction_IRSensor_Gutter+0x52>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	d1 df       	rcall	.-94     	; 0x382 <SetGutter>
 3e0:	ce 01       	movw	r24, r28
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <SetStepMotor_InitialRotation>:
 3e8:	e9 ed       	ldi	r30, 0xD9	; 217
 3ea:	f6 e0       	ldi	r31, 0x06	; 6
 3ec:	88 e3       	ldi	r24, 0x38	; 56
 3ee:	92 e0       	ldi	r25, 0x02	; 2
 3f0:	91 83       	std	Z+1, r25	; 0x01
 3f2:	80 83       	st	Z, r24
 3f4:	13 82       	std	Z+3, r1	; 0x03
 3f6:	12 82       	std	Z+2, r1	; 0x02
 3f8:	14 82       	std	Z+4, r1	; 0x04
 3fa:	08 95       	ret

000003fc <SetStepMotor_RotateLeft>:
 3fc:	e9 ed       	ldi	r30, 0xD9	; 217
 3fe:	f6 e0       	ldi	r31, 0x06	; 6
 400:	81 e7       	ldi	r24, 0x71	; 113
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	91 83       	std	Z+1, r25	; 0x01
 406:	80 83       	st	Z, r24
 408:	13 82       	std	Z+3, r1	; 0x03
 40a:	12 82       	std	Z+2, r1	; 0x02
 40c:	14 82       	std	Z+4, r1	; 0x04
 40e:	08 95       	ret

00000410 <SetStepMotor_RotateRight>:
 410:	e9 ed       	ldi	r30, 0xD9	; 217
 412:	f6 e0       	ldi	r31, 0x06	; 6
 414:	81 e7       	ldi	r24, 0x71	; 113
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	91 83       	std	Z+1, r25	; 0x01
 41a:	80 83       	st	Z, r24
 41c:	13 82       	std	Z+3, r1	; 0x03
 41e:	12 82       	std	Z+2, r1	; 0x02
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	84 83       	std	Z+4, r24	; 0x04
 424:	08 95       	ret

00000426 <SetStepMotor_ResetFromInitial>:
 426:	e9 ed       	ldi	r30, 0xD9	; 217
 428:	f6 e0       	ldi	r31, 0x06	; 6
 42a:	20 81       	ld	r18, Z
 42c:	31 81       	ldd	r19, Z+1	; 0x01
 42e:	88 e3       	ldi	r24, 0x38	; 56
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	82 1b       	sub	r24, r18
 434:	93 0b       	sbc	r25, r19
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	84 83       	std	Z+4, r24	; 0x04
 43e:	13 82       	std	Z+3, r1	; 0x03
 440:	12 82       	std	Z+2, r1	; 0x02
 442:	08 95       	ret

00000444 <SetStepMotor_Reset>:
 444:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 448:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 44c:	21 e7       	ldi	r18, 0x71	; 113
 44e:	34 e0       	ldi	r19, 0x04	; 4
 450:	28 1b       	sub	r18, r24
 452:	39 0b       	sbc	r19, r25
 454:	82 17       	cp	r24, r18
 456:	93 07       	cpc	r25, r19
 458:	c8 f4       	brcc	.+50     	; 0x48c <SetStepMotor_Reset+0x48>
 45a:	e9 ed       	ldi	r30, 0xD9	; 217
 45c:	f6 e0       	ldi	r31, 0x06	; 6
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	34 81       	ldd	r19, Z+4	; 0x04
 462:	31 11       	cpse	r19, r1
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	24 83       	std	Z+4, r18	; 0x04
 468:	e9 ed       	ldi	r30, 0xD9	; 217
 46a:	f6 e0       	ldi	r31, 0x06	; 6
 46c:	29 e3       	ldi	r18, 0x39	; 57
 46e:	32 e0       	ldi	r19, 0x02	; 2
 470:	a9 01       	movw	r20, r18
 472:	48 1b       	sub	r20, r24
 474:	59 0b       	sbc	r21, r25
 476:	51 83       	std	Z+1, r21	; 0x01
 478:	40 83       	st	Z, r20
 47a:	22 81       	ldd	r18, Z+2	; 0x02
 47c:	33 81       	ldd	r19, Z+3	; 0x03
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	82 1b       	sub	r24, r18
 484:	93 0b       	sbc	r25, r19
 486:	93 83       	std	Z+3, r25	; 0x03
 488:	82 83       	std	Z+2, r24	; 0x02
 48a:	08 95       	ret
 48c:	28 17       	cp	r18, r24
 48e:	39 07       	cpc	r19, r25
 490:	38 f4       	brcc	.+14     	; 0x4a0 <SetStepMotor_Reset+0x5c>
 492:	89 53       	subi	r24, 0x39	; 57
 494:	92 40       	sbci	r25, 0x02	; 2
 496:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <stepMotor+0x1>
 49a:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <stepMotor>
 49e:	08 95       	ret
 4a0:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <stepMotor+0x1>
 4a4:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <stepMotor>
 4a8:	08 95       	ret

000004aa <RotateStepMotorLeft>:
 4aa:	e9 ed       	ldi	r30, 0xD9	; 217
 4ac:	f6 e0       	ldi	r31, 0x06	; 6
 4ae:	82 81       	ldd	r24, Z+2	; 0x02
 4b0:	93 81       	ldd	r25, Z+3	; 0x03
 4b2:	dc 01       	movw	r26, r24
 4b4:	a0 50       	subi	r26, 0x00	; 0
 4b6:	bf 4f       	sbci	r27, 0xFF	; 255
 4b8:	2c 91       	ld	r18, X
 4ba:	20 93 de 06 	sts	0x06DE, r18	; 0x8006de <currentRotation>
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	93 83       	std	Z+3, r25	; 0x03
 4c2:	82 83       	std	Z+2, r24	; 0x02
 4c4:	25 b9       	out	0x05, r18	; 5
 4c6:	08 97       	sbiw	r24, 0x08	; 8
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <RotateStepMotorLeft+0x28>
 4ca:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <stepMotor+0x3>
 4ce:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <stepMotor+0x2>
 4d2:	08 95       	ret

000004d4 <RotateStepMotorRight>:
 4d4:	e9 ed       	ldi	r30, 0xD9	; 217
 4d6:	f6 e0       	ldi	r31, 0x06	; 6
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	dc 01       	movw	r26, r24
 4de:	a8 5f       	subi	r26, 0xF8	; 248
 4e0:	be 4f       	sbci	r27, 0xFE	; 254
 4e2:	2c 91       	ld	r18, X
 4e4:	20 93 de 06 	sts	0x06DE, r18	; 0x8006de <currentRotation>
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	93 83       	std	Z+3, r25	; 0x03
 4ec:	82 83       	std	Z+2, r24	; 0x02
 4ee:	25 b9       	out	0x05, r18	; 5
 4f0:	08 97       	sbiw	r24, 0x08	; 8
 4f2:	20 f0       	brcs	.+8      	; 0x4fc <RotateStepMotorRight+0x28>
 4f4:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <stepMotor+0x3>
 4f8:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <stepMotor+0x2>
 4fc:	08 95       	ret

000004fe <TickFunction_StepMotor>:
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	e6 dd       	rcall	.-1076   	; 0xd4 <Set_A2D_Pin>
 508:	89 ef       	ldi	r24, 0xF9	; 249
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <TickFunction_StepMotor+0xe>
 510:	00 c0       	rjmp	.+0      	; 0x512 <TickFunction_StepMotor+0x14>
 512:	00 00       	nop
 514:	c2 30       	cpi	r28, 0x02	; 2
 516:	d1 05       	cpc	r29, r1
 518:	09 f4       	brne	.+2      	; 0x51c <TickFunction_StepMotor+0x1e>
 51a:	44 c0       	rjmp	.+136    	; 0x5a4 <TickFunction_StepMotor+0xa6>
 51c:	34 f4       	brge	.+12     	; 0x52a <TickFunction_StepMotor+0x2c>
 51e:	20 97       	sbiw	r28, 0x00	; 0
 520:	71 f0       	breq	.+28     	; 0x53e <TickFunction_StepMotor+0x40>
 522:	c1 30       	cpi	r28, 0x01	; 1
 524:	d1 05       	cpc	r29, r1
 526:	91 f0       	breq	.+36     	; 0x54c <TickFunction_StepMotor+0x4e>
 528:	67 c0       	rjmp	.+206    	; 0x5f8 <TickFunction_StepMotor+0xfa>
 52a:	c4 30       	cpi	r28, 0x04	; 4
 52c:	d1 05       	cpc	r29, r1
 52e:	09 f4       	brne	.+2      	; 0x532 <TickFunction_StepMotor+0x34>
 530:	59 c0       	rjmp	.+178    	; 0x5e4 <TickFunction_StepMotor+0xe6>
 532:	14 f1       	brlt	.+68     	; 0x578 <TickFunction_StepMotor+0x7a>
 534:	c5 30       	cpi	r28, 0x05	; 5
 536:	d1 05       	cpc	r29, r1
 538:	09 f4       	brne	.+2      	; 0x53c <TickFunction_StepMotor+0x3e>
 53a:	4a c0       	rjmp	.+148    	; 0x5d0 <TickFunction_StepMotor+0xd2>
 53c:	5d c0       	rjmp	.+186    	; 0x5f8 <TickFunction_StepMotor+0xfa>
 53e:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <isPlaying>
 542:	88 23       	and	r24, r24
 544:	09 f4       	brne	.+2      	; 0x548 <TickFunction_StepMotor+0x4a>
 546:	a9 c0       	rjmp	.+338    	; 0x69a <TickFunction_StepMotor+0x19c>
 548:	4f df       	rcall	.-354    	; 0x3e8 <SetStepMotor_InitialRotation>
 54a:	69 c0       	rjmp	.+210    	; 0x61e <TickFunction_StepMotor+0x120>
 54c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 550:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 554:	8c 32       	cpi	r24, 0x2C	; 44
 556:	91 40       	sbci	r25, 0x01	; 1
 558:	20 f0       	brcs	.+8      	; 0x562 <TickFunction_StepMotor+0x64>
 55a:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <isPlaying>
 55e:	81 11       	cpse	r24, r1
 560:	02 c0       	rjmp	.+4      	; 0x566 <TickFunction_StepMotor+0x68>
 562:	61 df       	rcall	.-318    	; 0x426 <SetStepMotor_ResetFromInitial>
 564:	90 c0       	rjmp	.+288    	; 0x686 <TickFunction_StepMotor+0x188>
 566:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 56a:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 56e:	89 2b       	or	r24, r25
 570:	09 f0       	breq	.+2      	; 0x574 <TickFunction_StepMotor+0x76>
 572:	55 c0       	rjmp	.+170    	; 0x61e <TickFunction_StepMotor+0x120>
 574:	4d df       	rcall	.-358    	; 0x410 <SetStepMotor_RotateRight>
 576:	69 c0       	rjmp	.+210    	; 0x64a <TickFunction_StepMotor+0x14c>
 578:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 57c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 580:	8c 32       	cpi	r24, 0x2C	; 44
 582:	91 40       	sbci	r25, 0x01	; 1
 584:	20 f0       	brcs	.+8      	; 0x58e <TickFunction_StepMotor+0x90>
 586:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <isPlaying>
 58a:	81 11       	cpse	r24, r1
 58c:	02 c0       	rjmp	.+4      	; 0x592 <TickFunction_StepMotor+0x94>
 58e:	5a df       	rcall	.-332    	; 0x444 <SetStepMotor_Reset>
 590:	67 c0       	rjmp	.+206    	; 0x660 <TickFunction_StepMotor+0x162>
 592:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 596:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 59a:	89 2b       	or	r24, r25
 59c:	09 f0       	breq	.+2      	; 0x5a0 <TickFunction_StepMotor+0xa2>
 59e:	4a c0       	rjmp	.+148    	; 0x634 <TickFunction_StepMotor+0x136>
 5a0:	37 df       	rcall	.-402    	; 0x410 <SetStepMotor_RotateRight>
 5a2:	53 c0       	rjmp	.+166    	; 0x64a <TickFunction_StepMotor+0x14c>
 5a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 5a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 5ac:	8c 32       	cpi	r24, 0x2C	; 44
 5ae:	91 40       	sbci	r25, 0x01	; 1
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <TickFunction_StepMotor+0xbc>
 5b2:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <isPlaying>
 5b6:	81 11       	cpse	r24, r1
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <TickFunction_StepMotor+0xc0>
 5ba:	44 df       	rcall	.-376    	; 0x444 <SetStepMotor_Reset>
 5bc:	51 c0       	rjmp	.+162    	; 0x660 <TickFunction_StepMotor+0x162>
 5be:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 5c2:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 5c6:	89 2b       	or	r24, r25
 5c8:	09 f0       	breq	.+2      	; 0x5cc <TickFunction_StepMotor+0xce>
 5ca:	3f c0       	rjmp	.+126    	; 0x64a <TickFunction_StepMotor+0x14c>
 5cc:	17 df       	rcall	.-466    	; 0x3fc <SetStepMotor_RotateLeft>
 5ce:	32 c0       	rjmp	.+100    	; 0x634 <TickFunction_StepMotor+0x136>
 5d0:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 5d4:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 5d8:	89 2b       	or	r24, r25
 5da:	09 f0       	breq	.+2      	; 0x5de <TickFunction_StepMotor+0xe0>
 5dc:	41 c0       	rjmp	.+130    	; 0x660 <TickFunction_StepMotor+0x162>
 5de:	c0 e0       	ldi	r28, 0x00	; 0
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	5b c0       	rjmp	.+182    	; 0x69a <TickFunction_StepMotor+0x19c>
 5e4:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <stepMotor>
 5e8:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <stepMotor+0x1>
 5ec:	89 2b       	or	r24, r25
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <TickFunction_StepMotor+0xf4>
 5f0:	4a c0       	rjmp	.+148    	; 0x686 <TickFunction_StepMotor+0x188>
 5f2:	c0 e0       	ldi	r28, 0x00	; 0
 5f4:	d0 e0       	ldi	r29, 0x00	; 0
 5f6:	51 c0       	rjmp	.+162    	; 0x69a <TickFunction_StepMotor+0x19c>
 5f8:	c3 30       	cpi	r28, 0x03	; 3
 5fa:	d1 05       	cpc	r29, r1
 5fc:	d9 f0       	breq	.+54     	; 0x634 <TickFunction_StepMotor+0x136>
 5fe:	3c f4       	brge	.+14     	; 0x60e <TickFunction_StepMotor+0x110>
 600:	c1 30       	cpi	r28, 0x01	; 1
 602:	d1 05       	cpc	r29, r1
 604:	61 f0       	breq	.+24     	; 0x61e <TickFunction_StepMotor+0x120>
 606:	c2 30       	cpi	r28, 0x02	; 2
 608:	d1 05       	cpc	r29, r1
 60a:	f9 f0       	breq	.+62     	; 0x64a <TickFunction_StepMotor+0x14c>
 60c:	46 c0       	rjmp	.+140    	; 0x69a <TickFunction_StepMotor+0x19c>
 60e:	c4 30       	cpi	r28, 0x04	; 4
 610:	d1 05       	cpc	r29, r1
 612:	c9 f1       	breq	.+114    	; 0x686 <TickFunction_StepMotor+0x188>
 614:	c5 30       	cpi	r28, 0x05	; 5
 616:	d1 05       	cpc	r29, r1
 618:	09 f0       	breq	.+2      	; 0x61c <TickFunction_StepMotor+0x11e>
 61a:	3f c0       	rjmp	.+126    	; 0x69a <TickFunction_StepMotor+0x19c>
 61c:	21 c0       	rjmp	.+66     	; 0x660 <TickFunction_StepMotor+0x162>
 61e:	45 df       	rcall	.-374    	; 0x4aa <RotateStepMotorLeft>
 620:	e9 ed       	ldi	r30, 0xD9	; 217
 622:	f6 e0       	ldi	r31, 0x06	; 6
 624:	80 81       	ld	r24, Z
 626:	91 81       	ldd	r25, Z+1	; 0x01
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
 62e:	c1 e0       	ldi	r28, 0x01	; 1
 630:	d0 e0       	ldi	r29, 0x00	; 0
 632:	33 c0       	rjmp	.+102    	; 0x69a <TickFunction_StepMotor+0x19c>
 634:	3a df       	rcall	.-396    	; 0x4aa <RotateStepMotorLeft>
 636:	e9 ed       	ldi	r30, 0xD9	; 217
 638:	f6 e0       	ldi	r31, 0x06	; 6
 63a:	80 81       	ld	r24, Z
 63c:	91 81       	ldd	r25, Z+1	; 0x01
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	91 83       	std	Z+1, r25	; 0x01
 642:	80 83       	st	Z, r24
 644:	c3 e0       	ldi	r28, 0x03	; 3
 646:	d0 e0       	ldi	r29, 0x00	; 0
 648:	28 c0       	rjmp	.+80     	; 0x69a <TickFunction_StepMotor+0x19c>
 64a:	44 df       	rcall	.-376    	; 0x4d4 <RotateStepMotorRight>
 64c:	e9 ed       	ldi	r30, 0xD9	; 217
 64e:	f6 e0       	ldi	r31, 0x06	; 6
 650:	80 81       	ld	r24, Z
 652:	91 81       	ldd	r25, Z+1	; 0x01
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	91 83       	std	Z+1, r25	; 0x01
 658:	80 83       	st	Z, r24
 65a:	c2 e0       	ldi	r28, 0x02	; 2
 65c:	d0 e0       	ldi	r29, 0x00	; 0
 65e:	1d c0       	rjmp	.+58     	; 0x69a <TickFunction_StepMotor+0x19c>
 660:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <stepMotor+0x4>
 664:	81 11       	cpse	r24, r1
 666:	02 c0       	rjmp	.+4      	; 0x66c <TickFunction_StepMotor+0x16e>
 668:	20 df       	rcall	.-448    	; 0x4aa <RotateStepMotorLeft>
 66a:	03 c0       	rjmp	.+6      	; 0x672 <TickFunction_StepMotor+0x174>
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	09 f4       	brne	.+2      	; 0x672 <TickFunction_StepMotor+0x174>
 670:	31 df       	rcall	.-414    	; 0x4d4 <RotateStepMotorRight>
 672:	e9 ed       	ldi	r30, 0xD9	; 217
 674:	f6 e0       	ldi	r31, 0x06	; 6
 676:	80 81       	ld	r24, Z
 678:	91 81       	ldd	r25, Z+1	; 0x01
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
 680:	c5 e0       	ldi	r28, 0x05	; 5
 682:	d0 e0       	ldi	r29, 0x00	; 0
 684:	0a c0       	rjmp	.+20     	; 0x69a <TickFunction_StepMotor+0x19c>
 686:	26 df       	rcall	.-436    	; 0x4d4 <RotateStepMotorRight>
 688:	e9 ed       	ldi	r30, 0xD9	; 217
 68a:	f6 e0       	ldi	r31, 0x06	; 6
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	91 83       	std	Z+1, r25	; 0x01
 694:	80 83       	st	Z, r24
 696:	c4 e0       	ldi	r28, 0x04	; 4
 698:	d0 e0       	ldi	r29, 0x00	; 0
 69a:	ce 01       	movw	r24, r28
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <UpdateLCD_GameCountdown>:
	"  Game Over :(  Restarting 3...", "  Game Over :(  Restarting 4...", "  Game Over :(  Restarting 5..."
};

unsigned char GetGameTimerInSeconds()
{
	return gameTimer / NUMBER_TICKS_PER_SECOND;
 6a2:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 6a6:	6d ec       	ldi	r22, 0xCD	; 205
 6a8:	86 9f       	mul	r24, r22
 6aa:	61 2d       	mov	r22, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	66 95       	lsr	r22
 6b0:	66 95       	lsr	r22
}

void UpdateLCD_GameCountdown()
{
	LCD_DisplayString(1, GAME_COUNTDOWN[GetGameTimerInSeconds()]);
 6b2:	80 e2       	ldi	r24, 0x20	; 32
 6b4:	68 9f       	mul	r22, r24
 6b6:	b0 01       	movw	r22, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	6d 54       	subi	r22, 0x4D	; 77
 6bc:	7d 4f       	sbci	r23, 0xFD	; 253
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	5b cd       	rjmp	.-1354   	; 0x178 <LCD_DisplayString>
 6c2:	08 95       	ret

000006c4 <UpdateLCD_GameWon>:
}

void UpdateLCD_GameWon()
{
	LCD_DisplayString(1, " -- Winner!! -- Congratulations!");
 6c4:	60 e2       	ldi	r22, 0x20	; 32
 6c6:	71 e0       	ldi	r23, 0x01	; 1
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	56 cd       	rjmp	.-1364   	; 0x178 <LCD_DisplayString>
 6cc:	08 95       	ret

000006ce <UpdateLCD_GameLost>:
	"  Game Over :(  Restarting 3...", "  Game Over :(  Restarting 4...", "  Game Over :(  Restarting 5..."
};

unsigned char GetGameTimerInSeconds()
{
	return gameTimer / NUMBER_TICKS_PER_SECOND;
 6ce:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 6d2:	6d ec       	ldi	r22, 0xCD	; 205
 6d4:	86 9f       	mul	r24, r22
 6d6:	61 2d       	mov	r22, r1
 6d8:	11 24       	eor	r1, r1
 6da:	66 95       	lsr	r22
 6dc:	66 95       	lsr	r22
	LCD_DisplayString(1, " -- Winner!! -- Congratulations!");
}

void UpdateLCD_GameLost()
{
	LCD_DisplayString(1, GAME_LOST[GetGameTimerInSeconds()]);
 6de:	80 e2       	ldi	r24, 0x20	; 32
 6e0:	68 9f       	mul	r22, r24
 6e2:	b0 01       	movw	r22, r0
 6e4:	11 24       	eor	r1, r1
 6e6:	6d 50       	subi	r22, 0x0D	; 13
 6e8:	7e 4f       	sbci	r23, 0xFE	; 254
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	45 cd       	rjmp	.-1398   	; 0x178 <LCD_DisplayString>
 6ee:	08 95       	ret

000006f0 <UpdateLCD_Wait_BallIn>:
}

void UpdateLCD_Wait_BallIn()
{
	LCD_DisplayString(1, "  Insert Ball   ");
 6f0:	61 e4       	ldi	r22, 0x41	; 65
 6f2:	71 e0       	ldi	r23, 0x01	; 1
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	40 cd       	rjmp	.-1408   	; 0x178 <LCD_DisplayString>
 6f8:	08 95       	ret

000006fa <UpdateLCD_NewHighScore>:
}

void UpdateLCD_NewHighScore()
{
	LCD_DisplayString(1, "-NEW HIGH SCORE-Congratulations!");
 6fa:	62 e5       	ldi	r22, 0x52	; 82
 6fc:	71 e0       	ldi	r23, 0x01	; 1
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	3b cd       	rjmp	.-1418   	; 0x178 <LCD_DisplayString>
 702:	08 95       	ret

00000704 <UpdateLCD_To_MainScreen>:
};
unsigned char highscoreDisplayString[32];

void UpdateLCD_To_MainScreen()
{
	LCD_DisplayString(1, "   -- Main --     --> To Start  ");
 704:	63 e7       	ldi	r22, 0x73	; 115
 706:	71 e0       	ldi	r23, 0x01	; 1
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	36 cd       	rjmp	.-1428   	; 0x178 <LCD_DisplayString>
 70c:	08 95       	ret

0000070e <UpdateLCD_To_ViewHighScoreScreen>:
}

void UpdateLCD_To_ViewHighScoreScreen()
{
	LCD_DisplayString(1, highscoreDisplayString);
 70e:	69 ee       	ldi	r22, 0xE9	; 233
 710:	76 e0       	ldi	r23, 0x06	; 6
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	31 cd       	rjmp	.-1438   	; 0x178 <LCD_DisplayString>
 716:	08 95       	ret

00000718 <UpdateLCD_To_ResetHighScoreScreen>:
}

void UpdateLCD_To_ResetHighScoreScreen()
{
	LCD_DisplayString(1, "Reset High Score  --> To Reset  ");
 718:	64 e9       	ldi	r22, 0x94	; 148
 71a:	71 e0       	ldi	r23, 0x01	; 1
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	2c cd       	rjmp	.-1448   	; 0x178 <LCD_DisplayString>
 720:	08 95       	ret

00000722 <UpdateLCD_To_DidResetHighScoreScreen>:
}

void UpdateLCD_To_DidResetHighScoreScreen()
{
	LCD_DisplayString(1, "High Score Reset  <-- To Return ");
 722:	65 eb       	ldi	r22, 0xB5	; 181
 724:	71 e0       	ldi	r23, 0x01	; 1
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	27 cd       	rjmp	.-1458   	; 0x178 <LCD_DisplayString>
 72a:	08 95       	ret

0000072c <SetInitialHighScore_DisplayString>:
}

void SetInitialHighScore_DisplayString()
{
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	00 d0       	rcall	.+0      	; 0x732 <SetInitialHighScore_DisplayString+0x6>
 732:	1f 92       	push	r1
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
	unsigned char bestTime = eeprom_read_byte(EEPROM_ADDRESS);
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	b1 d3       	rcall	.+1890   	; 0xea0 <eeprom_read_byte>
	unsigned char test[3];
	itoa(bestTime, test, 10);
 73e:	4a e0       	ldi	r20, 0x0A	; 10
 740:	50 e0       	ldi	r21, 0x00	; 0
 742:	be 01       	movw	r22, r28
 744:	6f 5f       	subi	r22, 0xFF	; 255
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	6d d3       	rcall	.+1754   	; 0xe26 <itoa>
 74c:	81 ee       	ldi	r24, 0xE1	; 225
 74e:	94 e0       	ldi	r25, 0x04	; 4
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <SetInitialHighScore_DisplayString+0x24>
 754:	00 c0       	rjmp	.+0      	; 0x756 <SetInitialHighScore_DisplayString+0x2a>
 756:	00 00       	nop
	_delay_ms(5);
	
	strcpy(highscoreDisplayString, "-- HIGH SCORE -- Best Time: ");
 758:	8d e1       	ldi	r24, 0x1D	; 29
 75a:	e6 ed       	ldi	r30, 0xD6	; 214
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	a9 ee       	ldi	r26, 0xE9	; 233
 760:	b6 e0       	ldi	r27, 0x06	; 6
 762:	01 90       	ld	r0, Z+
 764:	0d 92       	st	X+, r0
 766:	8a 95       	dec	r24
 768:	e1 f7       	brne	.-8      	; 0x762 <SetInitialHighScore_DisplayString+0x36>
	strcat(highscoreDisplayString, test);
 76a:	be 01       	movw	r22, r28
 76c:	6f 5f       	subi	r22, 0xFF	; 255
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	89 ee       	ldi	r24, 0xE9	; 233
 772:	96 e0       	ldi	r25, 0x06	; 6
 774:	4d d3       	rcall	.+1690   	; 0xe10 <strcat>
	strcat(highscoreDisplayString, "s");
 776:	e9 ee       	ldi	r30, 0xE9	; 233
 778:	f6 e0       	ldi	r31, 0x06	; 6
 77a:	01 90       	ld	r0, Z+
 77c:	00 20       	and	r0, r0
 77e:	e9 f7       	brne	.-6      	; 0x77a <SetInitialHighScore_DisplayString+0x4e>
 780:	31 97       	sbiw	r30, 0x01	; 1
 782:	83 e7       	ldi	r24, 0x73	; 115
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	91 83       	std	Z+1, r25	; 0x01
 788:	80 83       	st	Z, r24
}
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <UpdateHighScore_DisplayString>:

void UpdateHighScore_DisplayString()
{
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	00 d0       	rcall	.+0      	; 0x79c <UpdateHighScore_DisplayString+0x6>
 79c:	1f 92       	push	r1
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
	unsigned char score[3];
	itoa(CURRENT_HIGHSCORE, score, 10);
 7a2:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <CURRENT_HIGHSCORE>
 7a6:	4a e0       	ldi	r20, 0x0A	; 10
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	be 01       	movw	r22, r28
 7ac:	6f 5f       	subi	r22, 0xFF	; 255
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	39 d3       	rcall	.+1650   	; 0xe26 <itoa>
	
	strcpy(highscoreDisplayString, "-- HIGH SCORE -- Best Time: ");
 7b4:	8d e1       	ldi	r24, 0x1D	; 29
 7b6:	e6 ed       	ldi	r30, 0xD6	; 214
 7b8:	f1 e0       	ldi	r31, 0x01	; 1
 7ba:	a9 ee       	ldi	r26, 0xE9	; 233
 7bc:	b6 e0       	ldi	r27, 0x06	; 6
 7be:	01 90       	ld	r0, Z+
 7c0:	0d 92       	st	X+, r0
 7c2:	8a 95       	dec	r24
 7c4:	e1 f7       	brne	.-8      	; 0x7be <UpdateHighScore_DisplayString+0x28>
	strcat(highscoreDisplayString, score);
 7c6:	be 01       	movw	r22, r28
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	89 ee       	ldi	r24, 0xE9	; 233
 7ce:	96 e0       	ldi	r25, 0x06	; 6
 7d0:	1f d3       	rcall	.+1598   	; 0xe10 <strcat>
	strcat(highscoreDisplayString, "s");
 7d2:	e9 ee       	ldi	r30, 0xE9	; 233
 7d4:	f6 e0       	ldi	r31, 0x06	; 6
 7d6:	01 90       	ld	r0, Z+
 7d8:	00 20       	and	r0, r0
 7da:	e9 f7       	brne	.-6      	; 0x7d6 <UpdateHighScore_DisplayString+0x40>
 7dc:	31 97       	sbiw	r30, 0x01	; 1
 7de:	83 e7       	ldi	r24, 0x73	; 115
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	91 83       	std	Z+1, r25	; 0x01
 7e4:	80 83       	st	Z, r24
}
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	08 95       	ret

000007f2 <TickFunction_Game>:
{
	LCD_DisplayString(1, "-NEW HIGH SCORE-Congratulations!");
}

int TickFunction_Game(int state)
{
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	ec 01       	movw	r28, r24
	Set_A2D_Pin(5);
 7f8:	85 e0       	ldi	r24, 0x05	; 5
 7fa:	6c dc       	rcall	.-1832   	; 0xd4 <Set_A2D_Pin>
 7fc:	89 ef       	ldi	r24, 0xF9	; 249
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	f1 f7       	brne	.-4      	; 0x800 <TickFunction_Game+0xe>
 804:	00 c0       	rjmp	.+0      	; 0x806 <TickFunction_Game+0x14>
 806:	00 00       	nop
	_delay_ms(1);
	unsigned short joystickXValue = 0;
	
	switch (state) // Game Transitions
 808:	c2 30       	cpi	r28, 0x02	; 2
 80a:	d1 05       	cpc	r29, r1
 80c:	b1 f1       	breq	.+108    	; 0x87a <TickFunction_Game+0x88>
 80e:	34 f4       	brge	.+12     	; 0x81c <TickFunction_Game+0x2a>
 810:	20 97       	sbiw	r28, 0x00	; 0
 812:	81 f0       	breq	.+32     	; 0x834 <TickFunction_Game+0x42>
 814:	c1 30       	cpi	r28, 0x01	; 1
 816:	d1 05       	cpc	r29, r1
 818:	b1 f0       	breq	.+44     	; 0x846 <TickFunction_Game+0x54>
 81a:	bc c0       	rjmp	.+376    	; 0x994 <TickFunction_Game+0x1a2>
 81c:	c5 30       	cpi	r28, 0x05	; 5
 81e:	d1 05       	cpc	r29, r1
 820:	09 f4       	brne	.+2      	; 0x824 <TickFunction_Game+0x32>
 822:	82 c0       	rjmp	.+260    	; 0x928 <TickFunction_Game+0x136>
 824:	c6 30       	cpi	r28, 0x06	; 6
 826:	d1 05       	cpc	r29, r1
 828:	09 f4       	brne	.+2      	; 0x82c <TickFunction_Game+0x3a>
 82a:	88 c0       	rjmp	.+272    	; 0x93c <TickFunction_Game+0x14a>
 82c:	23 97       	sbiw	r28, 0x03	; 3
 82e:	09 f0       	breq	.+2      	; 0x832 <TickFunction_Game+0x40>
 830:	b1 c0       	rjmp	.+354    	; 0x994 <TickFunction_Game+0x1a2>
 832:	64 c0       	rjmp	.+200    	; 0x8fc <TickFunction_Game+0x10a>
	{
		case Wait_Game:
		if (isGameMode == true)
 834:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <isGameMode>
 838:	88 23       	and	r24, r24
 83a:	09 f4       	brne	.+2      	; 0x83e <TickFunction_Game+0x4c>
 83c:	e3 c0       	rjmp	.+454    	; 0xa04 <TickFunction_Game+0x212>
		{
			UpdateLCD_Wait_BallIn();
 83e:	58 df       	rcall	.-336    	; 0x6f0 <UpdateLCD_Wait_BallIn>
			state = Wait_BallIn_Game;
 840:	c1 e0       	ldi	r28, 0x01	; 1
 842:	d0 e0       	ldi	r29, 0x00	; 0
 844:	df c0       	rjmp	.+446    	; 0xa04 <TickFunction_Game+0x212>
			state = Wait_Game;
		}
		break;
		
		case Wait_BallIn_Game:
		joystickXValue = ADC;
 846:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 84a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		if (joystickXValue < JOYSTICK_THRESHOLD_LOW) // Reset
 84e:	8c 32       	cpi	r24, 0x2C	; 44
 850:	91 40       	sbci	r25, 0x01	; 1
 852:	30 f4       	brcc	.+12     	; 0x860 <TickFunction_Game+0x6e>
		{
			LCD_ClearScreen();
 854:	6e dc       	rcall	.-1828   	; 0x132 <LCD_ClearScreen>
			SetGameMode(false);
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	22 dd       	rcall	.-1468   	; 0x29e <SetGameMode>
			state = Wait_Game;
 85a:	c0 e0       	ldi	r28, 0x00	; 0
 85c:	d0 e0       	ldi	r29, 0x00	; 0
 85e:	d2 c0       	rjmp	.+420    	; 0xa04 <TickFunction_Game+0x212>
		}
		else
		{
			if (isBallIn == true) // Ball In
 860:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <isBallIn>
 864:	88 23       	and	r24, r24
 866:	09 f4       	brne	.+2      	; 0x86a <TickFunction_Game+0x78>
 868:	cd c0       	rjmp	.+410    	; 0xa04 <TickFunction_Game+0x212>
			{
				SetPlaying(true);
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	1e dd       	rcall	.-1476   	; 0x2aa <SetPlaying>
				SetBallIn(false);
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	22 dd       	rcall	.-1468   	; 0x2b6 <SetBallIn>
				gameTimer = THIRTY_SECONDS;
 872:	86 e9       	ldi	r24, 0x96	; 150
 874:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
 878:	6b c0       	rjmp	.+214    	; 0x950 <TickFunction_Game+0x15e>
			}
		}
		break;
		
		case Play_Game:
		joystickXValue = ADC;
 87a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 87e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		if (joystickXValue < JOYSTICK_THRESHOLD_LOW) // Reset
 882:	8c 32       	cpi	r24, 0x2C	; 44
 884:	91 40       	sbci	r25, 0x01	; 1
 886:	30 f4       	brcc	.+12     	; 0x894 <TickFunction_Game+0xa2>
		{
			LCD_ClearScreen();
 888:	54 dc       	rcall	.-1880   	; 0x132 <LCD_ClearScreen>
			SetPlaying(false);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	0e dd       	rcall	.-1508   	; 0x2aa <SetPlaying>
			state = Wait_Game;
 88e:	c0 e0       	ldi	r28, 0x00	; 0
 890:	d0 e0       	ldi	r29, 0x00	; 0
 892:	b8 c0       	rjmp	.+368    	; 0xa04 <TickFunction_Game+0x212>
		}
		else
		{
			if ((isGoal == true) && (gameTimer > 0)) // Win
 894:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <isGoal>
 898:	88 23       	and	r24, r24
 89a:	f1 f0       	breq	.+60     	; 0x8d8 <TickFunction_Game+0xe6>
 89c:	c0 91 d8 06 	lds	r28, 0x06D8	; 0x8006d8 <gameTimer>
 8a0:	cc 23       	and	r28, r28
 8a2:	19 f1       	breq	.+70     	; 0x8ea <TickFunction_Game+0xf8>
			{
				SetPlaying(false);
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	01 dd       	rcall	.-1534   	; 0x2aa <SetPlaying>
				SetGoal(false);
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	38 dd       	rcall	.-1424   	; 0x31c <SetGoal>
	"  Game Over :(  Restarting 3...", "  Game Over :(  Restarting 4...", "  Game Over :(  Restarting 5..."
};

unsigned char GetGameTimerInSeconds()
{
	return gameTimer / NUMBER_TICKS_PER_SECOND;
 8ac:	8d ec       	ldi	r24, 0xCD	; 205
 8ae:	c8 9f       	mul	r28, r24
 8b0:	c1 2d       	mov	r28, r1
 8b2:	11 24       	eor	r1, r1
 8b4:	c6 95       	lsr	r28
 8b6:	c6 95       	lsr	r28
		{
			if ((isGoal == true) && (gameTimer > 0)) // Win
			{
				SetPlaying(false);
				SetGoal(false);
				if (GetGameTimerInSeconds() > CURRENT_HIGHSCORE)
 8b8:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <CURRENT_HIGHSCORE>
 8bc:	8c 17       	cp	r24, r28
 8be:	38 f4       	brcc	.+14     	; 0x8ce <TickFunction_Game+0xdc>
				{
					CURRENT_HIGHSCORE = GetGameTimerInSeconds();
 8c0:	c0 93 d7 06 	sts	0x06D7, r28	; 0x8006d7 <CURRENT_HIGHSCORE>
					gameTimer = FIVE_SECONDS;
 8c4:	89 e1       	ldi	r24, 0x19	; 25
 8c6:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
					UpdateLCD_NewHighScore();
 8ca:	17 df       	rcall	.-466    	; 0x6fa <UpdateLCD_NewHighScore>
 8cc:	8c c0       	rjmp	.+280    	; 0x9e6 <TickFunction_Game+0x1f4>
					state = NewHighScore_Game;
				}
				else
				{
					gameTimer = FIVE_SECONDS;
 8ce:	89 e1       	ldi	r24, 0x19	; 25
 8d0:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
					UpdateLCD_GameWon();
 8d4:	f7 de       	rcall	.-530    	; 0x6c4 <UpdateLCD_GameWon>
 8d6:	70 c0       	rjmp	.+224    	; 0x9b8 <TickFunction_Game+0x1c6>
					state = Won_Game;
				}
			}
			else if ((gameTimer <= 0) || (isGutter == true)) // Lose
 8d8:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 8dc:	88 23       	and	r24, r24
 8de:	29 f0       	breq	.+10     	; 0x8ea <TickFunction_Game+0xf8>
 8e0:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <isGutter>
 8e4:	88 23       	and	r24, r24
 8e6:	09 f4       	brne	.+2      	; 0x8ea <TickFunction_Game+0xf8>
 8e8:	6f c0       	rjmp	.+222    	; 0x9c8 <TickFunction_Game+0x1d6>
			{
				SetPlaying(false);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	de dc       	rcall	.-1604   	; 0x2aa <SetPlaying>
				SetGutter(false);
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	48 dd       	rcall	.-1392   	; 0x382 <SetGutter>
				gameTimer = FIVE_SECONDS;
 8f2:	89 e1       	ldi	r24, 0x19	; 25
 8f4:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
				UpdateLCD_GameLost();
 8f8:	ea de       	rcall	.-556    	; 0x6ce <UpdateLCD_GameLost>
				state = Lost_Game;
 8fa:	4f c0       	rjmp	.+158    	; 0x99a <TickFunction_Game+0x1a8>
			}
		}
		break;
		
		case NewHighScore_Game:
		if (gameTimer <= 0)
 8fc:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 900:	81 11       	cpse	r24, r1
 902:	71 c0       	rjmp	.+226    	; 0x9e6 <TickFunction_Game+0x1f4>
		{
			eeprom_write_byte(EEPROM_ADDRESS, CURRENT_HIGHSCORE);
 904:	60 91 d7 06 	lds	r22, 0x06D7	; 0x8006d7 <CURRENT_HIGHSCORE>
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	d1 d2       	rcall	.+1442   	; 0xeb0 <eeprom_write_byte>
 90e:	81 ee       	ldi	r24, 0xE1	; 225
 910:	94 e0       	ldi	r25, 0x04	; 4
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	f1 f7       	brne	.-4      	; 0x912 <TickFunction_Game+0x120>
 916:	00 c0       	rjmp	.+0      	; 0x918 <TickFunction_Game+0x126>
 918:	00 00       	nop
			_delay_ms(5);
			UpdateHighScore_DisplayString();
 91a:	3d df       	rcall	.-390    	; 0x796 <UpdateHighScore_DisplayString>
			LCD_ClearScreen();
 91c:	0a dc       	rcall	.-2028   	; 0x132 <LCD_ClearScreen>
			SetGameMode(false);
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	be dc       	rcall	.-1668   	; 0x29e <SetGameMode>
			state = Wait_Game;
 922:	c0 e0       	ldi	r28, 0x00	; 0
 924:	d0 e0       	ldi	r29, 0x00	; 0
 926:	6e c0       	rjmp	.+220    	; 0xa04 <TickFunction_Game+0x212>
			state = NewHighScore_Game;
		}
		break;
		
		case Won_Game:
		if (gameTimer <= 0)
 928:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 92c:	81 11       	cpse	r24, r1
 92e:	44 c0       	rjmp	.+136    	; 0x9b8 <TickFunction_Game+0x1c6>
		{
			LCD_ClearScreen();
 930:	00 dc       	rcall	.-2048   	; 0x132 <LCD_ClearScreen>
			SetGameMode(false);
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	b4 dc       	rcall	.-1688   	; 0x29e <SetGameMode>
			state = Wait_Game;
 936:	c0 e0       	ldi	r28, 0x00	; 0
 938:	d0 e0       	ldi	r29, 0x00	; 0
 93a:	64 c0       	rjmp	.+200    	; 0xa04 <TickFunction_Game+0x212>
			state = Won_Game;
		}
		break;
		
		case Lost_Game:
		if (gameTimer <= 0)
 93c:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 940:	81 11       	cpse	r24, r1
 942:	2b c0       	rjmp	.+86     	; 0x99a <TickFunction_Game+0x1a8>
		{
			LCD_ClearScreen();
 944:	f6 db       	rcall	.-2068   	; 0x132 <LCD_ClearScreen>
			SetGameMode(false);
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	aa dc       	rcall	.-1708   	; 0x29e <SetGameMode>
			state = Wait_Game;
 94a:	c0 e0       	ldi	r28, 0x00	; 0
 94c:	d0 e0       	ldi	r29, 0x00	; 0
 94e:	5a c0       	rjmp	.+180    	; 0xa04 <TickFunction_Game+0x212>
		break;
		
		case Play_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
		{
			UpdateLCD_GameCountdown();
 950:	a8 de       	rcall	.-688    	; 0x6a2 <UpdateLCD_GameCountdown>
		}
		--gameTimer;
 952:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 956:	81 50       	subi	r24, 0x01	; 1
 958:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
		break;
 95c:	c2 e0       	ldi	r28, 0x02	; 2
 95e:	d0 e0       	ldi	r29, 0x00	; 0
 960:	51 c0       	rjmp	.+162    	; 0xa04 <TickFunction_Game+0x212>
		
		case NewHighScore_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
		{
			LCD_ClearScreen();
 962:	e7 db       	rcall	.-2098   	; 0x132 <LCD_ClearScreen>
 964:	83 ef       	ldi	r24, 0xF3	; 243
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	f1 f7       	brne	.-4      	; 0x968 <TickFunction_Game+0x176>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <TickFunction_Game+0x17c>
 96e:	00 00       	nop
			_delay_ms(2);
			UpdateLCD_NewHighScore();
 970:	c4 de       	rcall	.-632    	; 0x6fa <UpdateLCD_NewHighScore>
		}
		--gameTimer;
 972:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 976:	81 50       	subi	r24, 0x01	; 1
 978:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
		break;
 97c:	c3 e0       	ldi	r28, 0x03	; 3
 97e:	d0 e0       	ldi	r29, 0x00	; 0
 980:	41 c0       	rjmp	.+130    	; 0xa04 <TickFunction_Game+0x212>
		break;
		
		case Lost_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
		{
			UpdateLCD_GameLost();
 982:	a5 de       	rcall	.-694    	; 0x6ce <UpdateLCD_GameLost>
		}
		--gameTimer;
 984:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 988:	81 50       	subi	r24, 0x01	; 1
 98a:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
		break;
 98e:	c6 e0       	ldi	r28, 0x06	; 6
 990:	d0 e0       	ldi	r29, 0x00	; 0
 992:	38 c0       	rjmp	.+112    	; 0xa04 <TickFunction_Game+0x212>
			state = Lost_Game;
		}
		break;
		
		default:
		state = Wait_Game;
 994:	c0 e0       	ldi	r28, 0x00	; 0
 996:	d0 e0       	ldi	r29, 0x00	; 0
 998:	35 c0       	rjmp	.+106    	; 0xa04 <TickFunction_Game+0x212>
		case Won_Game:
		--gameTimer;
		break;
		
		case Lost_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
 99a:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <gameTimer>
 99e:	8d ec       	ldi	r24, 0xCD	; 205
 9a0:	98 9f       	mul	r25, r24
 9a2:	81 2d       	mov	r24, r1
 9a4:	11 24       	eor	r1, r1
 9a6:	86 95       	lsr	r24
 9a8:	86 95       	lsr	r24
 9aa:	28 2f       	mov	r18, r24
 9ac:	22 0f       	add	r18, r18
 9ae:	22 0f       	add	r18, r18
 9b0:	82 0f       	add	r24, r18
 9b2:	98 13       	cpse	r25, r24
 9b4:	e7 cf       	rjmp	.-50     	; 0x984 <TickFunction_Game+0x192>
 9b6:	e5 cf       	rjmp	.-54     	; 0x982 <TickFunction_Game+0x190>
		}
		--gameTimer;
		break;
		
		case Won_Game:
		--gameTimer;
 9b8:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <gameTimer>
 9bc:	81 50       	subi	r24, 0x01	; 1
 9be:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <gameTimer>
		break;
 9c2:	c5 e0       	ldi	r28, 0x05	; 5
 9c4:	d0 e0       	ldi	r29, 0x00	; 0
 9c6:	1e c0       	rjmp	.+60     	; 0xa04 <TickFunction_Game+0x212>
		
		case Wait_BallIn_Game:
		break;
		
		case Play_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
 9c8:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <gameTimer>
 9cc:	8d ec       	ldi	r24, 0xCD	; 205
 9ce:	98 9f       	mul	r25, r24
 9d0:	81 2d       	mov	r24, r1
 9d2:	11 24       	eor	r1, r1
 9d4:	86 95       	lsr	r24
 9d6:	86 95       	lsr	r24
 9d8:	28 2f       	mov	r18, r24
 9da:	22 0f       	add	r18, r18
 9dc:	22 0f       	add	r18, r18
 9de:	82 0f       	add	r24, r18
 9e0:	98 13       	cpse	r25, r24
 9e2:	b7 cf       	rjmp	.-146    	; 0x952 <TickFunction_Game+0x160>
 9e4:	b5 cf       	rjmp	.-150    	; 0x950 <TickFunction_Game+0x15e>
		}
		--gameTimer;
		break;
		
		case NewHighScore_Game:
		if (gameTimer % NUMBER_TICKS_PER_SECOND == 0)
 9e6:	90 91 d8 06 	lds	r25, 0x06D8	; 0x8006d8 <gameTimer>
 9ea:	8d ec       	ldi	r24, 0xCD	; 205
 9ec:	98 9f       	mul	r25, r24
 9ee:	81 2d       	mov	r24, r1
 9f0:	11 24       	eor	r1, r1
 9f2:	86 95       	lsr	r24
 9f4:	86 95       	lsr	r24
 9f6:	28 2f       	mov	r18, r24
 9f8:	22 0f       	add	r18, r18
 9fa:	22 0f       	add	r18, r18
 9fc:	82 0f       	add	r24, r18
 9fe:	98 13       	cpse	r25, r24
 a00:	b8 cf       	rjmp	.-144    	; 0x972 <TickFunction_Game+0x180>
 a02:	af cf       	rjmp	.-162    	; 0x962 <TickFunction_Game+0x170>
		default:
		break;
	}
	
	return state;
}
 a04:	ce 01       	movw	r24, r28
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	08 95       	ret

00000a0c <Reset_SavedHighScore>:
	strcat(highscoreDisplayString, "s");
}

void Reset_SavedHighScore()
{
	CURRENT_HIGHSCORE = 0;
 a0c:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <CURRENT_HIGHSCORE>
	eeprom_write_byte(EEPROM_ADDRESS, CURRENT_HIGHSCORE);
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	4c d2       	rcall	.+1176   	; 0xeb0 <eeprom_write_byte>
 a18:	81 ee       	ldi	r24, 0xE1	; 225
 a1a:	94 e0       	ldi	r25, 0x04	; 4
 a1c:	01 97       	sbiw	r24, 0x01	; 1
 a1e:	f1 f7       	brne	.-4      	; 0xa1c <Reset_SavedHighScore+0x10>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <Reset_SavedHighScore+0x16>
 a22:	00 00       	nop
	_delay_ms(5);
	
	UpdateHighScore_DisplayString();
 a24:	b8 ce       	rjmp	.-656    	; 0x796 <UpdateHighScore_DisplayString>
 a26:	08 95       	ret

00000a28 <TickFunction_Menu>:
}

int TickFunction_Menu(int state)
{
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	ec 01       	movw	r28, r24
	unsigned short joystickValue_X = GetJoystick_X();
 a32:	bb db       	rcall	.-2186   	; 0x1aa <GetJoystick_X>
 a34:	8c 01       	movw	r16, r24
	unsigned short joystickValue_Y = GetJoystick_Y();
 a36:	c6 db       	rcall	.-2164   	; 0x1c4 <GetJoystick_Y>
	
	switch(state) // state Transitions
 a38:	c2 30       	cpi	r28, 0x02	; 2
 a3a:	d1 05       	cpc	r29, r1
 a3c:	b9 f1       	breq	.+110    	; 0xaac <TickFunction_Menu+0x84>
 a3e:	34 f4       	brge	.+12     	; 0xa4c <TickFunction_Menu+0x24>
 a40:	20 97       	sbiw	r28, 0x00	; 0
 a42:	69 f0       	breq	.+26     	; 0xa5e <TickFunction_Menu+0x36>
 a44:	c1 30       	cpi	r28, 0x01	; 1
 a46:	d1 05       	cpc	r29, r1
 a48:	11 f1       	breq	.+68     	; 0xa8e <TickFunction_Menu+0x66>
 a4a:	56 c0       	rjmp	.+172    	; 0xaf8 <TickFunction_Menu+0xd0>
 a4c:	c3 30       	cpi	r28, 0x03	; 3
 a4e:	d1 05       	cpc	r29, r1
 a50:	09 f4       	brne	.+2      	; 0xa54 <TickFunction_Menu+0x2c>
 a52:	43 c0       	rjmp	.+134    	; 0xada <TickFunction_Menu+0xb2>
 a54:	c4 30       	cpi	r28, 0x04	; 4
 a56:	d1 05       	cpc	r29, r1
 a58:	09 f4       	brne	.+2      	; 0xa5c <TickFunction_Menu+0x34>
 a5a:	46 c0       	rjmp	.+140    	; 0xae8 <TickFunction_Menu+0xc0>
 a5c:	4d c0       	rjmp	.+154    	; 0xaf8 <TickFunction_Menu+0xd0>
	{
		case Main_Screen:
		if (joystickValue_X > JOYSTICK_THRESHOLD_HIGH) // Toggle Right
 a5e:	01 32       	cpi	r16, 0x21	; 33
 a60:	13 40       	sbci	r17, 0x03	; 3
 a62:	28 f0       	brcs	.+10     	; 0xa6e <TickFunction_Menu+0x46>
		{
			SetGameMode(true);
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	1b dc       	rcall	.-1994   	; 0x29e <SetGameMode>
			state = Play_Screen;
 a68:	c4 e0       	ldi	r28, 0x04	; 4
 a6a:	d0 e0       	ldi	r29, 0x00	; 0
 a6c:	47 c0       	rjmp	.+142    	; 0xafc <TickFunction_Menu+0xd4>
		}
		else if (joystickValue_Y > JOYSTICK_THRESHOLD_HIGH) // Toggle Up
 a6e:	81 32       	cpi	r24, 0x21	; 33
 a70:	23 e0       	ldi	r18, 0x03	; 3
 a72:	92 07       	cpc	r25, r18
 a74:	20 f0       	brcs	.+8      	; 0xa7e <TickFunction_Menu+0x56>
		{
			UpdateLCD_To_ViewHighScoreScreen();
 a76:	4b de       	rcall	.-874    	; 0x70e <UpdateLCD_To_ViewHighScoreScreen>
			state = ViewHighScore_Screen;
 a78:	c1 e0       	ldi	r28, 0x01	; 1
 a7a:	d0 e0       	ldi	r29, 0x00	; 0
 a7c:	3f c0       	rjmp	.+126    	; 0xafc <TickFunction_Menu+0xd4>
		}
		else if (joystickValue_Y < JOYSTICK_THRESHOLD_LOW) // Toggle Down
 a7e:	8c 32       	cpi	r24, 0x2C	; 44
 a80:	91 40       	sbci	r25, 0x01	; 1
 a82:	08 f0       	brcs	.+2      	; 0xa86 <TickFunction_Menu+0x5e>
 a84:	3b c0       	rjmp	.+118    	; 0xafc <TickFunction_Menu+0xd4>
		{
			UpdateLCD_To_ResetHighScoreScreen();
 a86:	48 de       	rcall	.-880    	; 0x718 <UpdateLCD_To_ResetHighScoreScreen>
			state = ResetHighScore_Screen;
 a88:	c2 e0       	ldi	r28, 0x02	; 2
 a8a:	d0 e0       	ldi	r29, 0x00	; 0
 a8c:	37 c0       	rjmp	.+110    	; 0xafc <TickFunction_Menu+0xd4>
			state = Main_Screen;
		}
		break;
		
		case ViewHighScore_Screen:
		if (joystickValue_Y > JOYSTICK_THRESHOLD_HIGH) // Toggle Up
 a8e:	81 32       	cpi	r24, 0x21	; 33
 a90:	23 e0       	ldi	r18, 0x03	; 3
 a92:	92 07       	cpc	r25, r18
 a94:	20 f0       	brcs	.+8      	; 0xa9e <TickFunction_Menu+0x76>
		{
			UpdateLCD_To_ResetHighScoreScreen();
 a96:	40 de       	rcall	.-896    	; 0x718 <UpdateLCD_To_ResetHighScoreScreen>
			state = ResetHighScore_Screen;
 a98:	c2 e0       	ldi	r28, 0x02	; 2
 a9a:	d0 e0       	ldi	r29, 0x00	; 0
 a9c:	2f c0       	rjmp	.+94     	; 0xafc <TickFunction_Menu+0xd4>
		}
		else if (joystickValue_Y < JOYSTICK_THRESHOLD_LOW) // Toggle Down
 a9e:	8c 32       	cpi	r24, 0x2C	; 44
 aa0:	91 40       	sbci	r25, 0x01	; 1
 aa2:	60 f5       	brcc	.+88     	; 0xafc <TickFunction_Menu+0xd4>
		{
			UpdateLCD_To_MainScreen();
 aa4:	2f de       	rcall	.-930    	; 0x704 <UpdateLCD_To_MainScreen>
			state = Main_Screen;
 aa6:	c0 e0       	ldi	r28, 0x00	; 0
 aa8:	d0 e0       	ldi	r29, 0x00	; 0
 aaa:	28 c0       	rjmp	.+80     	; 0xafc <TickFunction_Menu+0xd4>
			state = ViewHighScore_Screen;
		}
		break;
		
		case ResetHighScore_Screen:
		if (joystickValue_X > JOYSTICK_THRESHOLD_HIGH) // Toggle Right
 aac:	01 32       	cpi	r16, 0x21	; 33
 aae:	13 40       	sbci	r17, 0x03	; 3
 ab0:	28 f0       	brcs	.+10     	; 0xabc <TickFunction_Menu+0x94>
		{
			state = DidResetHighScore_Screen;
			Reset_SavedHighScore();
 ab2:	ac df       	rcall	.-168    	; 0xa0c <Reset_SavedHighScore>
			
			UpdateLCD_To_DidResetHighScoreScreen();
 ab4:	36 de       	rcall	.-916    	; 0x722 <UpdateLCD_To_DidResetHighScoreScreen>
		break;
		
		case ResetHighScore_Screen:
		if (joystickValue_X > JOYSTICK_THRESHOLD_HIGH) // Toggle Right
		{
			state = DidResetHighScore_Screen;
 ab6:	c3 e0       	ldi	r28, 0x03	; 3
 ab8:	d0 e0       	ldi	r29, 0x00	; 0
			Reset_SavedHighScore();
			
			UpdateLCD_To_DidResetHighScoreScreen();
			break;
 aba:	20 c0       	rjmp	.+64     	; 0xafc <TickFunction_Menu+0xd4>
		}
		
		if (joystickValue_Y > JOYSTICK_THRESHOLD_HIGH) // Toggle Up
 abc:	81 32       	cpi	r24, 0x21	; 33
 abe:	23 e0       	ldi	r18, 0x03	; 3
 ac0:	92 07       	cpc	r25, r18
 ac2:	20 f0       	brcs	.+8      	; 0xacc <TickFunction_Menu+0xa4>
		{
			UpdateLCD_To_MainScreen();
 ac4:	1f de       	rcall	.-962    	; 0x704 <UpdateLCD_To_MainScreen>
			state = Main_Screen;
 ac6:	c0 e0       	ldi	r28, 0x00	; 0
 ac8:	d0 e0       	ldi	r29, 0x00	; 0
 aca:	18 c0       	rjmp	.+48     	; 0xafc <TickFunction_Menu+0xd4>
		}
		else if (joystickValue_Y < JOYSTICK_THRESHOLD_LOW) // Toggle Down
 acc:	8c 32       	cpi	r24, 0x2C	; 44
 ace:	91 40       	sbci	r25, 0x01	; 1
 ad0:	a8 f4       	brcc	.+42     	; 0xafc <TickFunction_Menu+0xd4>
		{
			UpdateLCD_To_ViewHighScoreScreen();
 ad2:	1d de       	rcall	.-966    	; 0x70e <UpdateLCD_To_ViewHighScoreScreen>
			state = ViewHighScore_Screen;
 ad4:	c1 e0       	ldi	r28, 0x01	; 1
 ad6:	d0 e0       	ldi	r29, 0x00	; 0
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <TickFunction_Menu+0xd4>
			state = ResetHighScore_Screen;
		}
		break;
		
		case DidResetHighScore_Screen:
		if (joystickValue_X < JOYSTICK_THRESHOLD_LOW) // Toggle Left
 ada:	0c 32       	cpi	r16, 0x2C	; 44
 adc:	11 40       	sbci	r17, 0x01	; 1
 ade:	70 f4       	brcc	.+28     	; 0xafc <TickFunction_Menu+0xd4>
		{
			UpdateLCD_To_ResetHighScoreScreen();
 ae0:	1b de       	rcall	.-970    	; 0x718 <UpdateLCD_To_ResetHighScoreScreen>
			state = ResetHighScore_Screen;
 ae2:	c2 e0       	ldi	r28, 0x02	; 2
 ae4:	d0 e0       	ldi	r29, 0x00	; 0
 ae6:	0a c0       	rjmp	.+20     	; 0xafc <TickFunction_Menu+0xd4>
			state = DidResetHighScore_Screen;
		}
		break;
		
		case Play_Screen:
		if (!isGameMode)
 ae8:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <isGameMode>
 aec:	81 11       	cpse	r24, r1
 aee:	06 c0       	rjmp	.+12     	; 0xafc <TickFunction_Menu+0xd4>
		{
			UpdateLCD_To_MainScreen();
 af0:	09 de       	rcall	.-1006   	; 0x704 <UpdateLCD_To_MainScreen>
			state = Main_Screen;
 af2:	c0 e0       	ldi	r28, 0x00	; 0
 af4:	d0 e0       	ldi	r29, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <TickFunction_Menu+0xd4>
		}
		break;
		
		default:
		joystickValue_X = joystickValue_Y = 540;
		state = Main_Screen;
 af8:	c0 e0       	ldi	r28, 0x00	; 0
 afa:	d0 e0       	ldi	r29, 0x00	; 0
		break;
	}
	
	return state;
}
 afc:	ce 01       	movw	r24, r28
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	1f 91       	pop	r17
 b04:	0f 91       	pop	r16
 b06:	08 95       	ret

00000b08 <main>:

int main(void)
{
 b08:	cf 93       	push	r28
 b0a:	df 93       	push	r29
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
 b10:	60 97       	sbiw	r28, 0x10	; 16
 b12:	0f b6       	in	r0, 0x3f	; 63
 b14:	f8 94       	cli
 b16:	de bf       	out	0x3e, r29	; 62
 b18:	0f be       	out	0x3f, r0	; 63
 b1a:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; // Input
 b1c:	11 b8       	out	0x01, r1	; 1
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Step Motor Output
 b22:	84 b9       	out	0x04, r24	; 4
 b24:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 b26:	87 b9       	out	0x07, r24	; 7
 b28:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 b2a:	8a b9       	out	0x0a, r24	; 10
 b2c:	1b b8       	out	0x0b, r1	; 11
	
	// Initializations
	isGameMode = false;
 b2e:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <isGameMode>
	isPlaying = false;
 b32:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <isPlaying>
	isBallIn = false;
 b36:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <isBallIn>
	isGoal = false;
 b3a:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <isGoal>
	isGutter = false;
 b3e:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <isGutter>
 b42:	18 ec       	ldi	r17, 0xC8	; 200
 b44:	00 e0       	ldi	r16, 0x00	; 0
 b46:	f1 2c       	mov	r15, r1
 b48:	e1 2c       	mov	r14, r1
 b4a:	5a e0       	ldi	r21, 0x0A	; 10
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	20 e0       	ldi	r18, 0x00	; 0
 b52:	04 c0       	rjmp	.+8      	; 0xb5c <main+0x54>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 b54:	16 2f       	mov	r17, r22
 b56:	07 2f       	mov	r16, r23
 b58:	f8 2e       	mov	r15, r24
 b5a:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 b5c:	65 2f       	mov	r22, r21
 b5e:	74 2f       	mov	r23, r20
 b60:	83 2f       	mov	r24, r19
 b62:	92 2f       	mov	r25, r18
 b64:	21 2f       	mov	r18, r17
 b66:	30 2f       	mov	r19, r16
 b68:	4f 2d       	mov	r20, r15
 b6a:	5e 2d       	mov	r21, r14
 b6c:	2f d1       	rcall	.+606    	; 0xdcc <__udivmodsi4>
 b6e:	51 2f       	mov	r21, r17
 b70:	40 2f       	mov	r20, r16
 b72:	3f 2d       	mov	r19, r15
 b74:	2e 2d       	mov	r18, r14
		if( c == 0 ) { return b; }
 b76:	61 15       	cp	r22, r1
 b78:	71 05       	cpc	r23, r1
 b7a:	81 05       	cpc	r24, r1
 b7c:	91 05       	cpc	r25, r1
 b7e:	51 f7       	brne	.-44     	; 0xb54 <main+0x4c>
 b80:	68 94       	set
 b82:	dd 24       	eor	r13, r13
 b84:	d1 f8       	bld	r13, 1
 b86:	c1 2c       	mov	r12, r1
 b88:	b1 2c       	mov	r11, r1
 b8a:	a1 2c       	mov	r10, r1
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <main+0x8e>
		a = b;
		b = c;
 b8e:	d6 2e       	mov	r13, r22
 b90:	c7 2e       	mov	r12, r23
 b92:	b8 2e       	mov	r11, r24
 b94:	a9 2e       	mov	r10, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 b96:	61 2f       	mov	r22, r17
 b98:	70 2f       	mov	r23, r16
 b9a:	8f 2d       	mov	r24, r15
 b9c:	9e 2d       	mov	r25, r14
 b9e:	2d 2d       	mov	r18, r13
 ba0:	3c 2d       	mov	r19, r12
 ba2:	4b 2d       	mov	r20, r11
 ba4:	5a 2d       	mov	r21, r10
 ba6:	12 d1       	rcall	.+548    	; 0xdcc <__udivmodsi4>
 ba8:	1d 2d       	mov	r17, r13
 baa:	0c 2d       	mov	r16, r12
 bac:	fb 2c       	mov	r15, r11
 bae:	ea 2c       	mov	r14, r10
		if( c == 0 ) { return b; }
 bb0:	61 15       	cp	r22, r1
 bb2:	71 05       	cpc	r23, r1
 bb4:	81 05       	cpc	r24, r1
 bb6:	91 05       	cpc	r25, r1
 bb8:	51 f7       	brne	.-44     	; 0xb8e <main+0x86>
 bba:	0f 2e       	mov	r0, r31
 bbc:	f4 e6       	ldi	r31, 0x64	; 100
 bbe:	ef 2e       	mov	r14, r31
 bc0:	f0 2d       	mov	r31, r0
 bc2:	f1 2c       	mov	r15, r1
 bc4:	00 e0       	ldi	r16, 0x00	; 0
 bc6:	10 e0       	ldi	r17, 0x00	; 0
 bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <main+0xca>
		a = b;
		b = c;
 bca:	e6 2e       	mov	r14, r22
 bcc:	f7 2e       	mov	r15, r23
 bce:	08 2f       	mov	r16, r24
 bd0:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 bd2:	6d 2d       	mov	r22, r13
 bd4:	7c 2d       	mov	r23, r12
 bd6:	8b 2d       	mov	r24, r11
 bd8:	9a 2d       	mov	r25, r10
 bda:	2e 2d       	mov	r18, r14
 bdc:	3f 2d       	mov	r19, r15
 bde:	40 2f       	mov	r20, r16
 be0:	51 2f       	mov	r21, r17
 be2:	f4 d0       	rcall	.+488    	; 0xdcc <__udivmodsi4>
 be4:	de 2c       	mov	r13, r14
 be6:	cf 2c       	mov	r12, r15
 be8:	b0 2e       	mov	r11, r16
 bea:	a1 2e       	mov	r10, r17
		if( c == 0 ) { return b; }
 bec:	61 15       	cp	r22, r1
 bee:	71 05       	cpc	r23, r1
 bf0:	81 05       	cpc	r24, r1
 bf2:	91 05       	cpc	r25, r1
 bf4:	51 f7       	brne	.-44     	; 0xbca <main+0xc2>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int GamePlay_Period = GamePlay_Calc/GCD;
 bf6:	68 ec       	ldi	r22, 0xC8	; 200
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	2e 2d       	mov	r18, r14
 c00:	3f 2d       	mov	r19, r15
 c02:	40 2f       	mov	r20, r16
 c04:	51 2f       	mov	r21, r17
 c06:	e2 d0       	rcall	.+452    	; 0xdcc <__udivmodsi4>
 c08:	2d 87       	std	Y+13, r18	; 0x0d
 c0a:	3e 87       	std	Y+14, r19	; 0x0e
 c0c:	4f 87       	std	Y+15, r20	; 0x0f
 c0e:	58 8b       	std	Y+16, r21	; 0x10
	unsigned long int IRSensor_Period = IRSensor_Calc/GCD;
 c10:	6a e0       	ldi	r22, 0x0A	; 10
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	80 e0       	ldi	r24, 0x00	; 0
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	2e 2d       	mov	r18, r14
 c1a:	3f 2d       	mov	r19, r15
 c1c:	40 2f       	mov	r20, r16
 c1e:	51 2f       	mov	r21, r17
 c20:	d5 d0       	rcall	.+426    	; 0xdcc <__udivmodsi4>
 c22:	49 01       	movw	r8, r18
 c24:	5a 01       	movw	r10, r20
	unsigned long int StepMotor_Period = StepMotor_Calc/GCD;
 c26:	62 e0       	ldi	r22, 0x02	; 2
 c28:	70 e0       	ldi	r23, 0x00	; 0
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	2e 2d       	mov	r18, r14
 c30:	3f 2d       	mov	r19, r15
 c32:	40 2f       	mov	r20, r16
 c34:	51 2f       	mov	r21, r17
 c36:	ca d0       	rcall	.+404    	; 0xdcc <__udivmodsi4>
 c38:	29 01       	movw	r4, r18
 c3a:	3a 01       	movw	r6, r20
	unsigned long int MainMenu_Period = MainMenu_Calc/GCD;
 c3c:	64 e6       	ldi	r22, 0x64	; 100
 c3e:	70 e0       	ldi	r23, 0x00	; 0
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	2e 2d       	mov	r18, r14
 c46:	3f 2d       	mov	r19, r15
 c48:	40 2f       	mov	r20, r16
 c4a:	51 2f       	mov	r21, r17
 c4c:	bf d0       	rcall	.+382    	; 0xdcc <__udivmodsi4>
	
	static task MainMenu_Task, GamePlay_Task, IRSensorBallIn_Task, IRSensorGoal_Task, IRSensorGutter_Task, StepMotor_Task;
	task *tasks[] = { &MainMenu_Task, &IRSensorBallIn_Task, &IRSensorGoal_Task, &IRSensorGutter_Task, &GamePlay_Task, &StepMotor_Task };
 c4e:	8c e0       	ldi	r24, 0x0C	; 12
 c50:	e4 e1       	ldi	r30, 0x14	; 20
 c52:	f1 e0       	ldi	r31, 0x01	; 1
 c54:	de 01       	movw	r26, r28
 c56:	11 96       	adiw	r26, 0x01	; 1
 c58:	01 90       	ld	r0, Z+
 c5a:	0d 92       	st	X+, r0
 c5c:	8a 95       	dec	r24
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <main+0x150>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	MainMenu_Task.state = Main_Screen;
 c60:	ec ec       	ldi	r30, 0xCC	; 204
 c62:	f6 e0       	ldi	r31, 0x06	; 6
 c64:	10 82       	st	Z, r1
	MainMenu_Task.period = MainMenu_Period;
 c66:	21 83       	std	Z+1, r18	; 0x01
 c68:	32 83       	std	Z+2, r19	; 0x02
 c6a:	43 83       	std	Z+3, r20	; 0x03
 c6c:	54 83       	std	Z+4, r21	; 0x04
	MainMenu_Task.elapsedTime = MainMenu_Period;
 c6e:	25 83       	std	Z+5, r18	; 0x05
 c70:	36 83       	std	Z+6, r19	; 0x06
 c72:	47 83       	std	Z+7, r20	; 0x07
 c74:	50 87       	std	Z+8, r21	; 0x08
	MainMenu_Task.TickFct = &TickFunction_Menu;
 c76:	84 e1       	ldi	r24, 0x14	; 20
 c78:	95 e0       	ldi	r25, 0x05	; 5
 c7a:	92 87       	std	Z+10, r25	; 0x0a
 c7c:	81 87       	std	Z+9, r24	; 0x09
	
	GamePlay_Task.state = Wait_Game;
 c7e:	e1 ec       	ldi	r30, 0xC1	; 193
 c80:	f6 e0       	ldi	r31, 0x06	; 6
 c82:	10 82       	st	Z, r1
	GamePlay_Task.period = GamePlay_Period;
 c84:	8d 85       	ldd	r24, Y+13	; 0x0d
 c86:	9e 85       	ldd	r25, Y+14	; 0x0e
 c88:	af 85       	ldd	r26, Y+15	; 0x0f
 c8a:	b8 89       	ldd	r27, Y+16	; 0x10
 c8c:	81 83       	std	Z+1, r24	; 0x01
 c8e:	92 83       	std	Z+2, r25	; 0x02
 c90:	a3 83       	std	Z+3, r26	; 0x03
 c92:	b4 83       	std	Z+4, r27	; 0x04
	GamePlay_Task.elapsedTime = GamePlay_Period;
 c94:	85 83       	std	Z+5, r24	; 0x05
 c96:	96 83       	std	Z+6, r25	; 0x06
 c98:	a7 83       	std	Z+7, r26	; 0x07
 c9a:	b0 87       	std	Z+8, r27	; 0x08
	GamePlay_Task.TickFct = &TickFunction_Game;
 c9c:	89 ef       	ldi	r24, 0xF9	; 249
 c9e:	93 e0       	ldi	r25, 0x03	; 3
 ca0:	92 87       	std	Z+10, r25	; 0x0a
 ca2:	81 87       	std	Z+9, r24	; 0x09
	
	StepMotor_Task.state = Wait_StepMotor;
 ca4:	e6 eb       	ldi	r30, 0xB6	; 182
 ca6:	f6 e0       	ldi	r31, 0x06	; 6
 ca8:	10 82       	st	Z, r1
	StepMotor_Task.period = StepMotor_Period;
 caa:	41 82       	std	Z+1, r4	; 0x01
 cac:	52 82       	std	Z+2, r5	; 0x02
 cae:	63 82       	std	Z+3, r6	; 0x03
 cb0:	74 82       	std	Z+4, r7	; 0x04
	StepMotor_Task.elapsedTime = StepMotor_Period;
 cb2:	45 82       	std	Z+5, r4	; 0x05
 cb4:	56 82       	std	Z+6, r5	; 0x06
 cb6:	67 82       	std	Z+7, r6	; 0x07
 cb8:	70 86       	std	Z+8, r7	; 0x08
	StepMotor_Task.TickFct = &TickFunction_StepMotor;
 cba:	8f e7       	ldi	r24, 0x7F	; 127
 cbc:	92 e0       	ldi	r25, 0x02	; 2
 cbe:	92 87       	std	Z+10, r25	; 0x0a
 cc0:	81 87       	std	Z+9, r24	; 0x09
	
	IRSensorBallIn_Task.state = Wait_Sensor;
 cc2:	eb ea       	ldi	r30, 0xAB	; 171
 cc4:	f6 e0       	ldi	r31, 0x06	; 6
 cc6:	10 82       	st	Z, r1
	IRSensorBallIn_Task.period = IRSensor_Period;
 cc8:	81 82       	std	Z+1, r8	; 0x01
 cca:	92 82       	std	Z+2, r9	; 0x02
 ccc:	a3 82       	std	Z+3, r10	; 0x03
 cce:	b4 82       	std	Z+4, r11	; 0x04
	IRSensorBallIn_Task.elapsedTime = IRSensor_Period;
 cd0:	85 82       	std	Z+5, r8	; 0x05
 cd2:	96 82       	std	Z+6, r9	; 0x06
 cd4:	a7 82       	std	Z+7, r10	; 0x07
 cd6:	b0 86       	std	Z+8, r11	; 0x08
	IRSensorBallIn_Task.TickFct = &TickFunction_IRSensor_BallIn;	
 cd8:	81 e6       	ldi	r24, 0x61	; 97
 cda:	91 e0       	ldi	r25, 0x01	; 1
 cdc:	92 87       	std	Z+10, r25	; 0x0a
 cde:	81 87       	std	Z+9, r24	; 0x09
	
	IRSensorGoal_Task.state = Wait_Sensor;
 ce0:	e0 ea       	ldi	r30, 0xA0	; 160
 ce2:	f6 e0       	ldi	r31, 0x06	; 6
 ce4:	10 82       	st	Z, r1
	IRSensorGoal_Task.period = IRSensor_Period;
 ce6:	81 82       	std	Z+1, r8	; 0x01
 ce8:	92 82       	std	Z+2, r9	; 0x02
 cea:	a3 82       	std	Z+3, r10	; 0x03
 cec:	b4 82       	std	Z+4, r11	; 0x04
	IRSensorGoal_Task.elapsedTime = IRSensor_Period;
 cee:	85 82       	std	Z+5, r8	; 0x05
 cf0:	96 82       	std	Z+6, r9	; 0x06
 cf2:	a7 82       	std	Z+7, r10	; 0x07
 cf4:	b0 86       	std	Z+8, r11	; 0x08
	IRSensorGoal_Task.TickFct = &TickFunction_IRSensor_Goal;
 cf6:	84 e9       	ldi	r24, 0x94	; 148
 cf8:	91 e0       	ldi	r25, 0x01	; 1
 cfa:	92 87       	std	Z+10, r25	; 0x0a
 cfc:	81 87       	std	Z+9, r24	; 0x09
	
	IRSensorGutter_Task.state = Wait_Sensor;
 cfe:	e5 e9       	ldi	r30, 0x95	; 149
 d00:	f6 e0       	ldi	r31, 0x06	; 6
 d02:	10 82       	st	Z, r1
	IRSensorGutter_Task.period = IRSensor_Period;
 d04:	81 82       	std	Z+1, r8	; 0x01
 d06:	92 82       	std	Z+2, r9	; 0x02
 d08:	a3 82       	std	Z+3, r10	; 0x03
 d0a:	b4 82       	std	Z+4, r11	; 0x04
	IRSensorGutter_Task.elapsedTime = IRSensor_Period;
 d0c:	85 82       	std	Z+5, r8	; 0x05
 d0e:	96 82       	std	Z+6, r9	; 0x06
 d10:	a7 82       	std	Z+7, r10	; 0x07
 d12:	b0 86       	std	Z+8, r11	; 0x08
	IRSensorGutter_Task.TickFct = &TickFunction_IRSensor_Gutter;
 d14:	87 ec       	ldi	r24, 0xC7	; 199
 d16:	91 e0       	ldi	r25, 0x01	; 1
 d18:	92 87       	std	Z+10, r25	; 0x0a
 d1a:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 d1c:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <_avr_timer_M>
 d20:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <_avr_timer_M+0x1>
 d24:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <_avr_timer_M+0x2>
 d28:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 d2c:	e0 92 e4 06 	sts	0x06E4, r14	; 0x8006e4 <_avr_timer_cntcurr>
 d30:	f0 92 e5 06 	sts	0x06E5, r15	; 0x8006e5 <_avr_timer_cntcurr+0x1>
 d34:	00 93 e6 06 	sts	0x06E6, r16	; 0x8006e6 <_avr_timer_cntcurr+0x2>
 d38:	10 93 e7 06 	sts	0x06E7, r17	; 0x8006e7 <_avr_timer_cntcurr+0x3>

	TimerSet(GCD);
	TimerOn();
 d3c:	50 da       	rcall	.-2912   	; 0x1de <TimerOn>
	A2D_init();
 d3e:	c4 d9       	rcall	.-3192   	; 0xc8 <A2D_init>
	LCD_init();
 d40:	03 da       	rcall	.-3066   	; 0x148 <LCD_init>
	UpdateLCD_To_MainScreen();
 d42:	e0 dc       	rcall	.-1600   	; 0x704 <UpdateLCD_To_MainScreen>
	SetInitialHighScore_DisplayString();
 d44:	f3 dc       	rcall	.-1562   	; 0x72c <SetInitialHighScore_DisplayString>
 d46:	6e 01       	movw	r12, r28
 d48:	9d e0       	ldi	r25, 0x0D	; 13
 d4a:	c9 0e       	add	r12, r25
 d4c:	d1 1c       	adc	r13, r1
 d4e:	de 01       	movw	r26, r28
 d50:	11 96       	adiw	r26, 0x01	; 1
 d52:	7d 01       	movw	r14, r26
	unsigned short i;
	while(1)
	{
		for (i = 0; i < numTasks; ++i)
		{
			if ( tasks[i]->elapsedTime == tasks[i]->period )
 d54:	f7 01       	movw	r30, r14
 d56:	01 91       	ld	r16, Z+
 d58:	11 91       	ld	r17, Z+
 d5a:	7f 01       	movw	r14, r30
 d5c:	d8 01       	movw	r26, r16
 d5e:	15 96       	adiw	r26, 0x05	; 5
 d60:	4d 91       	ld	r20, X+
 d62:	5d 91       	ld	r21, X+
 d64:	6d 91       	ld	r22, X+
 d66:	7c 91       	ld	r23, X
 d68:	18 97       	sbiw	r26, 0x08	; 8
 d6a:	11 96       	adiw	r26, 0x01	; 1
 d6c:	8d 91       	ld	r24, X+
 d6e:	9d 91       	ld	r25, X+
 d70:	0d 90       	ld	r0, X+
 d72:	bc 91       	ld	r27, X
 d74:	a0 2d       	mov	r26, r0
 d76:	48 17       	cp	r20, r24
 d78:	59 07       	cpc	r21, r25
 d7a:	6a 07       	cpc	r22, r26
 d7c:	7b 07       	cpc	r23, r27
 d7e:	81 f4       	brne	.+32     	; 0xda0 <main+0x298>
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 d80:	f8 01       	movw	r30, r16
 d82:	80 81       	ld	r24, Z
 d84:	01 84       	ldd	r0, Z+9	; 0x09
 d86:	f2 85       	ldd	r31, Z+10	; 0x0a
 d88:	e0 2d       	mov	r30, r0
 d8a:	08 2e       	mov	r0, r24
 d8c:	00 0c       	add	r0, r0
 d8e:	99 0b       	sbc	r25, r25
 d90:	09 95       	icall
 d92:	d8 01       	movw	r26, r16
 d94:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 d96:	f8 01       	movw	r30, r16
 d98:	15 82       	std	Z+5, r1	; 0x05
 d9a:	16 82       	std	Z+6, r1	; 0x06
 d9c:	17 82       	std	Z+7, r1	; 0x07
 d9e:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 da0:	f8 01       	movw	r30, r16
 da2:	85 81       	ldd	r24, Z+5	; 0x05
 da4:	96 81       	ldd	r25, Z+6	; 0x06
 da6:	a7 81       	ldd	r26, Z+7	; 0x07
 da8:	b0 85       	ldd	r27, Z+8	; 0x08
 daa:	01 96       	adiw	r24, 0x01	; 1
 dac:	a1 1d       	adc	r26, r1
 dae:	b1 1d       	adc	r27, r1
 db0:	85 83       	std	Z+5, r24	; 0x05
 db2:	96 83       	std	Z+6, r25	; 0x06
 db4:	a7 83       	std	Z+7, r26	; 0x07
 db6:	b0 87       	std	Z+8, r27	; 0x08
	SetInitialHighScore_DisplayString();
	
	unsigned short i;
	while(1)
	{
		for (i = 0; i < numTasks; ++i)
 db8:	ec 14       	cp	r14, r12
 dba:	fd 04       	cpc	r15, r13
 dbc:	59 f6       	brne	.-106    	; 0xd54 <main+0x24c>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 dbe:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <TimerFlag>
 dc2:	88 23       	and	r24, r24
 dc4:	e1 f3       	breq	.-8      	; 0xdbe <main+0x2b6>
		TimerFlag = 0;
 dc6:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <TimerFlag>
	}
 dca:	c1 cf       	rjmp	.-126    	; 0xd4e <main+0x246>

00000dcc <__udivmodsi4>:
 dcc:	a1 e2       	ldi	r26, 0x21	; 33
 dce:	1a 2e       	mov	r1, r26
 dd0:	aa 1b       	sub	r26, r26
 dd2:	bb 1b       	sub	r27, r27
 dd4:	fd 01       	movw	r30, r26
 dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <__udivmodsi4_ep>

00000dd8 <__udivmodsi4_loop>:
 dd8:	aa 1f       	adc	r26, r26
 dda:	bb 1f       	adc	r27, r27
 ddc:	ee 1f       	adc	r30, r30
 dde:	ff 1f       	adc	r31, r31
 de0:	a2 17       	cp	r26, r18
 de2:	b3 07       	cpc	r27, r19
 de4:	e4 07       	cpc	r30, r20
 de6:	f5 07       	cpc	r31, r21
 de8:	20 f0       	brcs	.+8      	; 0xdf2 <__udivmodsi4_ep>
 dea:	a2 1b       	sub	r26, r18
 dec:	b3 0b       	sbc	r27, r19
 dee:	e4 0b       	sbc	r30, r20
 df0:	f5 0b       	sbc	r31, r21

00000df2 <__udivmodsi4_ep>:
 df2:	66 1f       	adc	r22, r22
 df4:	77 1f       	adc	r23, r23
 df6:	88 1f       	adc	r24, r24
 df8:	99 1f       	adc	r25, r25
 dfa:	1a 94       	dec	r1
 dfc:	69 f7       	brne	.-38     	; 0xdd8 <__udivmodsi4_loop>
 dfe:	60 95       	com	r22
 e00:	70 95       	com	r23
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	bd 01       	movw	r22, r26
 e0c:	cf 01       	movw	r24, r30
 e0e:	08 95       	ret

00000e10 <strcat>:
 e10:	fb 01       	movw	r30, r22
 e12:	dc 01       	movw	r26, r24
 e14:	0d 90       	ld	r0, X+
 e16:	00 20       	and	r0, r0
 e18:	e9 f7       	brne	.-6      	; 0xe14 <strcat+0x4>
 e1a:	11 97       	sbiw	r26, 0x01	; 1
 e1c:	01 90       	ld	r0, Z+
 e1e:	0d 92       	st	X+, r0
 e20:	00 20       	and	r0, r0
 e22:	e1 f7       	brne	.-8      	; 0xe1c <strcat+0xc>
 e24:	08 95       	ret

00000e26 <itoa>:
 e26:	45 32       	cpi	r20, 0x25	; 37
 e28:	51 05       	cpc	r21, r1
 e2a:	18 f4       	brcc	.+6      	; 0xe32 <itoa+0xc>
 e2c:	42 30       	cpi	r20, 0x02	; 2
 e2e:	08 f0       	brcs	.+2      	; 0xe32 <itoa+0xc>
 e30:	04 c0       	rjmp	.+8      	; 0xe3a <__itoa_ncheck>
 e32:	fb 01       	movw	r30, r22
 e34:	10 82       	st	Z, r1
 e36:	cb 01       	movw	r24, r22
 e38:	08 95       	ret

00000e3a <__itoa_ncheck>:
 e3a:	bb 27       	eor	r27, r27
 e3c:	4a 30       	cpi	r20, 0x0A	; 10
 e3e:	31 f4       	brne	.+12     	; 0xe4c <__itoa_ncheck+0x12>
 e40:	99 23       	and	r25, r25
 e42:	22 f4       	brpl	.+8      	; 0xe4c <__itoa_ncheck+0x12>
 e44:	bd e2       	ldi	r27, 0x2D	; 45
 e46:	90 95       	com	r25
 e48:	81 95       	neg	r24
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	01 c0       	rjmp	.+2      	; 0xe50 <__utoa_common>

00000e4e <__utoa_ncheck>:
 e4e:	bb 27       	eor	r27, r27

00000e50 <__utoa_common>:
 e50:	fb 01       	movw	r30, r22
 e52:	55 27       	eor	r21, r21
 e54:	aa 27       	eor	r26, r26
 e56:	88 0f       	add	r24, r24
 e58:	99 1f       	adc	r25, r25
 e5a:	aa 1f       	adc	r26, r26
 e5c:	a4 17       	cp	r26, r20
 e5e:	10 f0       	brcs	.+4      	; 0xe64 <__utoa_common+0x14>
 e60:	a4 1b       	sub	r26, r20
 e62:	83 95       	inc	r24
 e64:	50 51       	subi	r21, 0x10	; 16
 e66:	b9 f7       	brne	.-18     	; 0xe56 <__utoa_common+0x6>
 e68:	a0 5d       	subi	r26, 0xD0	; 208
 e6a:	aa 33       	cpi	r26, 0x3A	; 58
 e6c:	08 f0       	brcs	.+2      	; 0xe70 <__utoa_common+0x20>
 e6e:	a9 5d       	subi	r26, 0xD9	; 217
 e70:	a1 93       	st	Z+, r26
 e72:	00 97       	sbiw	r24, 0x00	; 0
 e74:	79 f7       	brne	.-34     	; 0xe54 <__utoa_common+0x4>
 e76:	b1 11       	cpse	r27, r1
 e78:	b1 93       	st	Z+, r27
 e7a:	11 92       	st	Z+, r1
 e7c:	cb 01       	movw	r24, r22
 e7e:	00 c0       	rjmp	.+0      	; 0xe80 <strrev>

00000e80 <strrev>:
 e80:	dc 01       	movw	r26, r24
 e82:	fc 01       	movw	r30, r24
 e84:	67 2f       	mov	r22, r23
 e86:	71 91       	ld	r23, Z+
 e88:	77 23       	and	r23, r23
 e8a:	e1 f7       	brne	.-8      	; 0xe84 <strrev+0x4>
 e8c:	32 97       	sbiw	r30, 0x02	; 2
 e8e:	04 c0       	rjmp	.+8      	; 0xe98 <strrev+0x18>
 e90:	7c 91       	ld	r23, X
 e92:	6d 93       	st	X+, r22
 e94:	70 83       	st	Z, r23
 e96:	62 91       	ld	r22, -Z
 e98:	ae 17       	cp	r26, r30
 e9a:	bf 07       	cpc	r27, r31
 e9c:	c8 f3       	brcs	.-14     	; 0xe90 <strrev+0x10>
 e9e:	08 95       	ret

00000ea0 <eeprom_read_byte>:
 ea0:	f9 99       	sbic	0x1f, 1	; 31
 ea2:	fe cf       	rjmp	.-4      	; 0xea0 <eeprom_read_byte>
 ea4:	92 bd       	out	0x22, r25	; 34
 ea6:	81 bd       	out	0x21, r24	; 33
 ea8:	f8 9a       	sbi	0x1f, 0	; 31
 eaa:	99 27       	eor	r25, r25
 eac:	80 b5       	in	r24, 0x20	; 32
 eae:	08 95       	ret

00000eb0 <eeprom_write_byte>:
 eb0:	26 2f       	mov	r18, r22

00000eb2 <eeprom_write_r18>:
 eb2:	f9 99       	sbic	0x1f, 1	; 31
 eb4:	fe cf       	rjmp	.-4      	; 0xeb2 <eeprom_write_r18>
 eb6:	1f ba       	out	0x1f, r1	; 31
 eb8:	92 bd       	out	0x22, r25	; 34
 eba:	81 bd       	out	0x21, r24	; 33
 ebc:	20 bd       	out	0x20, r18	; 32
 ebe:	0f b6       	in	r0, 0x3f	; 63
 ec0:	f8 94       	cli
 ec2:	fa 9a       	sbi	0x1f, 2	; 31
 ec4:	f9 9a       	sbi	0x1f, 1	; 31
 ec6:	0f be       	out	0x3f, r0	; 63
 ec8:	01 96       	adiw	r24, 0x01	; 1
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
